{
  "address": "0xCD4819d0D6B87f4572fCE41f8AD22dA42a4c3CA8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_roomToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PositionClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakeTime",
          "type": "uint256"
        }
      ],
      "name": "PositionCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PositionRestaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unlockTime",
          "type": "uint256"
        }
      ],
      "name": "PositionUnstaked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "COOLDOWN_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        }
      ],
      "name": "canClaim",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IStaking.PositionStatus",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "offset",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "name": "getAllPositionsByStatusWithPagination",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "positionId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "unlockTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakeTime",
              "type": "uint256"
            },
            {
              "internalType": "enum IStaking.PositionStatus",
              "name": "status",
              "type": "uint8"
            }
          ],
          "internalType": "struct IStaking.Position[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "offset",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "name": "getAllPositionsWithPagination",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "positionId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "unlockTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakeTime",
              "type": "uint256"
            },
            {
              "internalType": "enum IStaking.PositionStatus",
              "name": "status",
              "type": "uint8"
            }
          ],
          "internalType": "struct IStaking.Position[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "offset",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "name": "getAllStakersWithPagination",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        }
      ],
      "name": "getPosition",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "positionId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "unlockTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakeTime",
              "type": "uint256"
            },
            {
              "internalType": "enum IStaking.PositionStatus",
              "name": "status",
              "type": "uint8"
            }
          ],
          "internalType": "struct IStaking.Position",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        }
      ],
      "name": "getTimeUntilUnlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserPositionCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserPositions",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "offset",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        }
      ],
      "name": "getUserPositionsPaginated",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserTotalStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isRegistered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextPositionId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "positions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unlockTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakeTime",
          "type": "uint256"
        },
        {
          "internalType": "enum IStaking.PositionStatus",
          "name": "status",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        }
      ],
      "name": "restake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roomToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stakers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "totalStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userPositions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6ecba686f0a7f515266af8d6d00d86b1c5c6f58326c123c0a06a3a047f901ecf",
  "receipt": {
    "to": null,
    "from": "0x1922d63490E4c8ad8F88D7023dFaE99609231d45",
    "contractAddress": "0xCD4819d0D6B87f4572fCE41f8AD22dA42a4c3CA8",
    "transactionIndex": 3,
    "gasUsed": "2635557",
    "logsBloom": "0x
    "blockHash": "0xa463a1cdc3f2fd9902b3f22de4f01bb7db1fde6d1d2321bb7db044b760d8c101",
    "transactionHash": "0x6ecba686f0a7f515266af8d6d00d86b1c5c6f58326c123c0a06a3a047f901ecf",
    "logs": [],
    "blockNumber": 32847313,
    "cumulativeGasUsed": "3000909",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x809fe0C6acD263C9CF987f3D30aD47Fdc4706e54"
  ],
  "numDeployments": 1,
  "solcInputHash": "73651a9c69d1da876ddf07874137aed5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_roomToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PositionClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeTime\",\"type\":\"uint256\"}],\"name\":\"PositionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PositionRestaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"name\":\"PositionUnstaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"COOLDOWN_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"}],\"name\":\"canClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IStaking.PositionStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"getAllPositionsByStatusWithPagination\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeTime\",\"type\":\"uint256\"},{\"internalType\":\"enum IStaking.PositionStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct IStaking.Position[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"getAllPositionsWithPagination\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeTime\",\"type\":\"uint256\"},{\"internalType\":\"enum IStaking.PositionStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct IStaking.Position[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"getAllStakersWithPagination\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"}],\"name\":\"getPosition\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeTime\",\"type\":\"uint256\"},{\"internalType\":\"enum IStaking.PositionStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct IStaking.Position\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"}],\"name\":\"getTimeUntilUnlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserPositionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserPositions\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"getUserPositionsPaginated\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserTotalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextPositionId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeTime\",\"type\":\"uint256\"},{\"internalType\":\"enum IStaking.PositionStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"}],\"name\":\"restake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roomToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userPositions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Staking contract for $ROOM tokens with 2-week lock period Features: - Unlimited number of positions per user - Each stake creates a unique position with positionId - 2-week lock period for unstaked tokens - Restake function to return pending tokens to active staking\",\"errors\":{\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"canClaim(uint256)\":{\"details\":\"Check if position can be claimed\",\"params\":{\"positionId\":\"ID of the position\"},\"returns\":{\"_0\":\"True if position can be claimed\"}},\"claim(uint256)\":{\"details\":\"Claim tokens after lock period has ended\",\"params\":{\"positionId\":\"ID of the position to claim\"}},\"getPosition(uint256)\":{\"details\":\"Get position details\",\"params\":{\"positionId\":\"ID of the position\"},\"returns\":{\"_0\":\"Position struct\"}},\"getTimeUntilUnlock(uint256)\":{\"details\":\"Get time remaining until position can be claimed\",\"params\":{\"positionId\":\"ID of the position\"},\"returns\":{\"_0\":\"Time remaining in seconds (0 if not pending or already unlockable)\"}},\"getUserTotalStaked(address)\":{\"details\":\"Get user's total staked amount\",\"params\":{\"user\":\"Address of the user\"},\"returns\":{\"_0\":\"Total staked amount\"}},\"restake(uint256)\":{\"details\":\"Restake tokens from a pending position (cancels lock period)\",\"params\":{\"positionId\":\"ID of the position to restake\"}},\"stake(uint256)\":{\"details\":\"Stake tokens and create a new position\",\"params\":{\"amount\":\"Amount of tokens to stake\"},\"returns\":{\"_0\":\"positionId The ID of the created position\"}},\"unstake(uint256)\":{\"details\":\"Unstake tokens from a position (starts lock period)\",\"params\":{\"positionId\":\"ID of the position to unstake\"}}},\"title\":\"Staking\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Staking.sol\":\"Staking\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x982c5cb790ab941d1e04f807120a71709d4c313ba0bfc16006447ffbd27fbbd5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"contracts/Staking.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport {IStaking} from \\\"./interfaces/IStaking.sol\\\";\\n\\n/**\\n * @title Staking\\n * @dev Staking contract for $ROOM tokens with 2-week lock period\\n * Features:\\n * - Unlimited number of positions per user\\n * - Each stake creates a unique position with positionId\\n * - 2-week lock period for unstaked tokens\\n * - Restake function to return pending tokens to active staking\\n */\\ncontract Staking is ReentrancyGuard, IStaking {\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public immutable roomToken;\\n\\n    uint256 public constant COOLDOWN_PERIOD = 2 * 7 * 24 * 3600; // 2 weeks in seconds\\n    uint256 public nextPositionId = 1;\\n\\n    mapping(uint256 => Position) public positions;\\n    mapping(address => uint256[]) public userPositions;\\n    mapping(address => uint256) public totalStaked;\\n\\n    address[] public stakers;\\n    mapping(address => bool) public isRegistered;\\n\\n    modifier onlyPositionOwner(uint256 positionId) {\\n        require(\\n            positions[positionId].owner == msg.sender,\\n            \\\"Not position owner\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier positionExists(uint256 positionId) {\\n        require(\\n            positions[positionId].owner != address(0),\\n            \\\"Position does not exist\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(address _roomToken) {\\n        require(_roomToken != address(0), \\\"ROOM token address cannot be zero\\\");\\n        roomToken = IERC20(_roomToken);\\n    }\\n\\n    /**\\n     * @dev Stake tokens and create a new position\\n     * @param amount Amount of tokens to stake\\n     * @return positionId The ID of the created position\\n     */\\n    function stake(uint256 amount) external nonReentrant returns (uint256) {\\n        require(amount > 0, \\\"Amount must be greater than zero\\\");\\n        roomToken.safeTransferFrom(msg.sender, address(this), amount);\\n\\n        uint256 positionId = nextPositionId++;\\n        positions[positionId] = Position({\\n            positionId: positionId,\\n            owner: msg.sender,\\n            amount: amount,\\n            unlockTime: 0,\\n            stakeTime: block.timestamp,\\n            status: PositionStatus.Active\\n        });\\n\\n        userPositions[msg.sender].push(positionId);\\n        totalStaked[msg.sender] += amount;\\n\\n        if (!isRegistered[msg.sender]) {\\n            isRegistered[msg.sender] = true;\\n            stakers.push(msg.sender);\\n        }\\n\\n        emit PositionCreated(positionId, msg.sender, amount, block.timestamp);\\n\\n        return positionId;\\n    }\\n\\n    /**\\n     * @dev Unstake tokens from a position (starts lock period)\\n     * @param positionId ID of the position to unstake\\n     */\\n    function unstake(\\n        uint256 positionId\\n    )\\n        external\\n        positionExists(positionId)\\n        onlyPositionOwner(positionId)\\n        nonReentrant\\n    {\\n        Position storage position = positions[positionId];\\n        require(\\n            position.status == PositionStatus.Active,\\n            \\\"Position not active\\\"\\n        );\\n\\n        position.status = PositionStatus.Pending;\\n        position.unlockTime = block.timestamp + COOLDOWN_PERIOD;\\n\\n        totalStaked[msg.sender] -= position.amount;\\n\\n        emit PositionUnstaked(\\n            positionId,\\n            msg.sender,\\n            position.amount,\\n            position.unlockTime\\n        );\\n    }\\n\\n    /**\\n     * @dev Claim tokens after lock period has ended\\n     * @param positionId ID of the position to claim\\n     */\\n    function claim(\\n        uint256 positionId\\n    )\\n        external\\n        positionExists(positionId)\\n        onlyPositionOwner(positionId)\\n        nonReentrant\\n    {\\n        Position storage position = positions[positionId];\\n        require(\\n            position.status == PositionStatus.Pending,\\n            \\\"Position not pending\\\"\\n        );\\n        require(\\n            block.timestamp >= position.unlockTime,\\n            \\\"Lock period not ended\\\"\\n        );\\n\\n        uint256 amount = position.amount;\\n        position.status = PositionStatus.Claimed;\\n\\n        roomToken.safeTransfer(msg.sender, amount);\\n\\n        emit PositionClaimed(positionId, msg.sender, amount);\\n    }\\n\\n    /**\\n     * @dev Restake tokens from a pending position (cancels lock period)\\n     * @param positionId ID of the position to restake\\n     */\\n    function restake(\\n        uint256 positionId\\n    )\\n        external\\n        positionExists(positionId)\\n        onlyPositionOwner(positionId)\\n        nonReentrant\\n    {\\n        Position storage position = positions[positionId];\\n        require(\\n            position.status == PositionStatus.Pending,\\n            \\\"Position not pending\\\"\\n        );\\n\\n        position.status = PositionStatus.Active;\\n        position.unlockTime = 0;\\n\\n        totalStaked[msg.sender] += position.amount;\\n\\n        emit PositionRestaked(positionId, msg.sender, position.amount);\\n    }\\n\\n    function getAllStakersWithPagination(\\n        uint256 offset,\\n        uint256 limit\\n    ) external view returns (address[] memory) {\\n        uint256 stakersLength = stakers.length;\\n\\n        if (offset >= stakersLength) {\\n            address[] memory result = new address[](limit);\\n            return result;\\n        }\\n\\n        uint256 actualLimit = limit;\\n        if (offset + limit > stakersLength) {\\n            actualLimit = stakersLength - offset;\\n        }\\n\\n        address[] memory result = new address[](actualLimit);\\n\\n        for (uint256 i = 0; i < actualLimit; i++) {\\n            result[i] = stakers[offset + i];\\n        }\\n\\n        return result;\\n    }\\n\\n    function getAllPositionsByStatusWithPagination(\\n        PositionStatus status,\\n        uint256 offset,\\n        uint256 limit\\n    ) external view returns (Position[] memory) {\\n        // First, count how many positions match the status\\n        uint256 matchCount = 0;\\n        for (uint256 i = 1; i < nextPositionId; i++) {\\n            if (positions[i].status == status) {\\n                matchCount++;\\n            }\\n        }\\n\\n        Position[] memory result = new Position[](limit);\\n\\n        if (offset >= matchCount) {\\n            return result;\\n        }\\n\\n        uint256 actualLimit = limit;\\n        if (offset + limit > matchCount) {\\n            actualLimit = matchCount - offset;\\n        }\\n\\n        uint256 resultIndex = 0;\\n        uint256 currentOffset = 0;\\n\\n        for (\\n            uint256 i = 1;\\n            i < nextPositionId && resultIndex < actualLimit;\\n            i++\\n        ) {\\n            if (positions[i].status == status) {\\n                if (currentOffset >= offset) {\\n                    result[resultIndex] = positions[i];\\n                    resultIndex++;\\n                }\\n                currentOffset++;\\n            }\\n        }\\n\\n        return result;\\n    }\\n\\n    function getAllPositionsWithPagination(\\n        uint256 offset,\\n        uint256 limit\\n    ) external view returns (Position[] memory) {\\n        uint256 totalPositions = nextPositionId - 1; // positions start from ID 1\\n\\n        Position[] memory result = new Position[](limit);\\n\\n        if (offset >= totalPositions) {\\n            return result;\\n        }\\n\\n        uint256 actualLimit = limit;\\n        if (offset + limit > totalPositions) {\\n            actualLimit = totalPositions - offset;\\n        }\\n\\n        for (uint256 i = 0; i < actualLimit; i++) {\\n            result[i] = positions[offset + 1 + i]; // positions start from ID 1\\n        }\\n\\n        return result;\\n    }\\n\\n    function getUserPositionsPaginated(\\n        address user,\\n        uint256 offset,\\n        uint256 limit\\n    ) external view returns (uint256[] memory) {\\n        uint256[] storage allPositions = userPositions[user];\\n        uint256 length = allPositions.length;\\n\\n        if (offset >= length) {\\n            return new uint256[](0);\\n        }\\n\\n        uint256 end = offset + limit;\\n        if (end > length) {\\n            end = length;\\n        }\\n\\n        uint256[] memory result = new uint256[](end - offset);\\n        for (uint256 i = offset; i < end; i++) {\\n            result[i - offset] = allPositions[i];\\n        }\\n\\n        return result;\\n    }\\n\\n    function getUserPositions(\\n        address user\\n    ) external view returns (uint256[] memory) {\\n        return userPositions[user];\\n    }\\n\\n    function getUserPositionCount(\\n        address user\\n    ) external view returns (uint256) {\\n        return userPositions[user].length;\\n    }\\n\\n    /**\\n     * @dev Get position details\\n     * @param positionId ID of the position\\n     * @return Position struct\\n     */\\n    function getPosition(\\n        uint256 positionId\\n    ) external view returns (Position memory) {\\n        return positions[positionId];\\n    }\\n\\n    /**\\n     * @dev Get user's total staked amount\\n     * @param user Address of the user\\n     * @return Total staked amount\\n     */\\n    function getUserTotalStaked(address user) external view returns (uint256) {\\n        return totalStaked[user];\\n    }\\n\\n    /**\\n     * @dev Get time remaining until position can be claimed\\n     * @param positionId ID of the position\\n     * @return Time remaining in seconds (0 if not pending or already unlockable)\\n     */\\n    function getTimeUntilUnlock(\\n        uint256 positionId\\n    ) external view returns (uint256) {\\n        Position memory position = positions[positionId];\\n        if (position.status != PositionStatus.Pending) {\\n            return 0;\\n        }\\n        if (block.timestamp >= position.unlockTime) {\\n            return 0;\\n        }\\n        return position.unlockTime - block.timestamp;\\n    }\\n\\n    /**\\n     * @dev Check if position can be claimed\\n     * @param positionId ID of the position\\n     * @return True if position can be claimed\\n     */\\n    function canClaim(uint256 positionId) external view returns (bool) {\\n        Position memory position = positions[positionId];\\n        return\\n            position.status == PositionStatus.Pending &&\\n            block.timestamp >= position.unlockTime;\\n    }\\n}\\n\",\"keccak256\":\"0x4e14e05e69f6a30f988afb445f125e95d5e52de4db3cf4f6b35dbf91b2582ede\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IStaking.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\ninterface IStaking {\\n    enum PositionStatus {\\n        None,\\n        Active,\\n        Pending,\\n        Claimed\\n    }\\n\\n    struct Position {\\n        uint256 positionId;\\n        address owner;\\n        uint256 amount;\\n        uint256 unlockTime;\\n        uint256 stakeTime;\\n        PositionStatus status;\\n    }\\n\\n    event PositionCreated(\\n        uint256 indexed positionId,\\n        address indexed owner,\\n        uint256 amount,\\n        uint256 stakeTime\\n    );\\n\\n    event PositionUnstaked(\\n        uint256 indexed positionId,\\n        address indexed owner,\\n        uint256 amount,\\n        uint256 unlockTime\\n    );\\n\\n    event PositionClaimed(\\n        uint256 indexed positionId,\\n        address indexed owner,\\n        uint256 amount\\n    );\\n\\n    event PositionRestaked(\\n        uint256 indexed positionId,\\n        address indexed owner,\\n        uint256 amount\\n    );\\n}\\n\",\"keccak256\":\"0x54e4cd40bc38c2e07887d35b9f875873d929b171f5d7a16f29b1777cb477a9a9\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60a0604052600180553480156200001557600080fd5b50604051620030433803806200304383398181016040528101906200003b91906200015a565b6001600081905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620000b5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000ac9062000213565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250505062000235565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200012282620000f5565b9050919050565b620001348162000115565b81146200014057600080fd5b50565b600081519050620001548162000129565b92915050565b600060208284031215620001735762000172620000f0565b5b6000620001838482850162000143565b91505092915050565b600082825260208201905092915050565b7f524f4f4d20746f6b656e20616464726573732063616e6e6f74206265207a657260008201527f6f00000000000000000000000000000000000000000000000000000000000000602082015250565b6000620001fb6021836200018c565b915062000208826200019d565b604082019050919050565b600060208201905081810360008301526200022e81620001ec565b9050919050565b608051612de46200025f60003960008181610c6e0152818161129e015261132d0152612de46000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c806399fbab88116100b8578063c3c5a5471161007c578063c3c5a547146103da578063c95c0d891461040a578063d71c3e411461043a578063eb02c3011461046a578063eb33b7501461049a578063fd5e6dd1146104ca57610142565b806399fbab881461030b5780639ae17af4146103405780639bfd8d611461035e578063a694fc3a1461038e578063bce1b520146103be57610142565b80635e1b4d991161010a5780635e1b4d991461020f57806360e1ce8d1461023f5780636e2f16961461026f5780636e99d52f1461029f5780638230252d146102bd578063899346c7146102ed57610142565b80632a6bc2dd146101475780632e17de78146101775780632f6fe5f71461019357806331e8a7ef146101c3578063379607f5146101f3575b600080fd5b610161600480360381019061015c91906121e7565b6104fa565b60405161016e91906122dc565b60405180910390f35b610191600480360381019061018c919061232a565b610591565b005b6101ad60048036038101906101a8919061232a565b610878565b6040516101ba9190612366565b60405180910390f35b6101dd60048036038101906101d891906121e7565b6109bc565b6040516101ea9190612366565b60405180910390f35b61020d6004803603810190610208919061232a565b610a08565b005b61022960048036038101906102249190612381565b610d10565b6040516102369190612366565b60405180910390f35b610259600480360381019061025491906123e6565b610d41565b60405161026691906125e9565b60405180910390f35b610289600480360381019061028491906121e7565b611001565b6040516102969190612366565b60405180910390f35b6102a761104a565b6040516102b49190612366565b60405180910390f35b6102d760048036038101906102d2919061260b565b611051565b6040516102e491906125e9565b60405180910390f35b6102f561122d565b6040516103029190612366565b60405180910390f35b6103256004803603810190610320919061232a565b611233565b60405161033796959493929190612669565b60405180910390f35b61034861129c565b6040516103559190612729565b60405180910390f35b610378600480360381019061037391906121e7565b6112c0565b6040516103859190612366565b60405180910390f35b6103a860048036038101906103a3919061232a565b6112d8565b6040516103b59190612366565b60405180910390f35b6103d860048036038101906103d3919061232a565b6116c4565b005b6103f460048036038101906103ef91906121e7565b611998565b604051610401919061275f565b60405180910390f35b610424600480360381019061041f919061232a565b6119b8565b604051610431919061275f565b60405180910390f35b610454600480360381019061044f919061260b565b611ad8565b6040516104619190612829565b60405180910390f35b610484600480360381019061047f919061232a565b611c79565b60405161049191906128c6565b60405180910390f35b6104b460048036038101906104af91906128e1565b611d5f565b6040516104c191906122dc565b60405180910390f35b6104e460048036038101906104df919061232a565b611ef4565b6040516104f19190612934565b60405180910390f35b6060600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561058557602002820191906000526020600020905b815481526020019060010190808311610571575b50505050509050919050565b80600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610637576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062e906129ac565b60405180910390fd5b813373ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146106dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d390612a18565b60405180910390fd5b6106e4611f33565b60006002600085815260200190815260200160002090506001600381111561070f5761070e612474565b5b8160050160009054906101000a900460ff16600381111561073357610732612474565b5b14610773576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076a90612a84565b60405180910390fd5b60028160050160006101000a81548160ff0219169083600381111561079b5761079a612474565b5b021790555062127500426107af9190612ad3565b81600301819055508060020154600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461080a9190612b07565b925050819055503373ffffffffffffffffffffffffffffffffffffffff16847ff69bed7fd866b8ff5e2d7b9ca384c57a26024d067d128ea7f01152351d6d085b83600201548460030154604051610862929190612b3b565b60405180910390a350610873611f79565b505050565b600080600260008481526020019081526020016000206040518060c0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820154815260200160038201548152602001600482015481526020016005820160009054906101000a900460ff16600381111561093c5761093b612474565b5b600381111561094e5761094d612474565b5b8152505090506002600381111561096857610967612474565b5b8160a00151600381111561097f5761097e612474565b5b1461098e5760009150506109b7565b806060015142106109a35760009150506109b7565b4281606001516109b39190612b07565b9150505b919050565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050919050565b80600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610aae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aa5906129ac565b60405180910390fd5b813373ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610b53576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4a90612a18565b60405180910390fd5b610b5b611f33565b600060026000858152602001908152602001600020905060026003811115610b8657610b85612474565b5b8160050160009054906101000a900460ff166003811115610baa57610ba9612474565b5b14610bea576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610be190612bb0565b60405180910390fd5b8060030154421015610c31576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c2890612c1c565b60405180910390fd5b60008160020154905060038260050160006101000a81548160ff02191690836003811115610c6257610c61612474565b5b0217905550610cb233827f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16611f839092919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff16857ff18ca9717b47ea7629d17b5d7b2ede46e864155725629e7d0347924c2f6d112d83604051610cf99190612366565b60405180910390a35050610d0b611f79565b505050565b60036020528160005260406000208181548110610d2c57600080fd5b90600052602060002001600091509150505481565b6060600080600190505b600154811015610dc557856003811115610d6857610d67612474565b5b6002600083815260200190815260200160002060050160009054906101000a900460ff166003811115610d9e57610d9d612474565b5b03610db2578180610dae90612c3c565b9250505b8080610dbd90612c3c565b915050610d4b565b5060008367ffffffffffffffff811115610de257610de1612c84565b5b604051908082528060200260200182016040528015610e1b57816020015b610e08612126565b815260200190600190039081610e005790505b509050818510610e2f578092505050610ffa565b6000849050828587610e419190612ad3565b1115610e56578583610e539190612b07565b90505b6000806000600190505b60015481108015610e7057508383105b15610ff057896003811115610e8857610e87612474565b5b6002600083815260200190815260200160002060050160009054906101000a900460ff166003811115610ebe57610ebd612474565b5b03610fdd57888210610fce57600260008281526020019081526020016000206040518060c0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820154815260200160038201548152602001600482015481526020016005820160009054906101000a900460ff166003811115610f8b57610f8a612474565b5b6003811115610f9d57610f9c612474565b5b81525050858481518110610fb457610fb3612cb3565b5b60200260200101819052508280610fca90612c3c565b9350505b8180610fd990612c3c565b9250505b8080610fe890612c3c565b915050610e60565b5083955050505050505b9392505050565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6212750081565b60606000600180546110639190612b07565b905060008367ffffffffffffffff81111561108157611080612c84565b5b6040519080825280602002602001820160405280156110ba57816020015b6110a7612126565b81526020019060019003908161109f5790505b5090508185106110ce578092505050611227565b60008490508285876110e09190612ad3565b11156110f55785836110f29190612b07565b90505b60005b8181101561121f57600260008260018a6111129190612ad3565b61111c9190612ad3565b81526020019081526020016000206040518060c0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820154815260200160038201548152602001600482015481526020016005820160009054906101000a900460ff1660038111156111d8576111d7612474565b5b60038111156111ea576111e9612474565b5b8152505083828151811061120157611200612cb3565b5b6020026020010181905250808061121790612c3c565b9150506110f8565b508193505050505b92915050565b60015481565b60026020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030154908060040154908060050160009054906101000a900460ff16905086565b7f000000000000000000000000000000000000000000000000000000000000000081565b60046020528060005260406000206000915090505481565b60006112e2611f33565b60008211611325576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161131c90612d2e565b60405180910390fd5b6113723330847f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16612002909392919063ffffffff16565b60006001600081548092919061138790612c3c565b9190505590506040518060c001604052808281526020013373ffffffffffffffffffffffffffffffffffffffff16815260200184815260200160008152602001428152602001600160038111156113e1576113e0612474565b5b815250600260008381526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020155606082015181600301556080820151816004015560a08201518160050160006101000a81548160ff0219169083600381111561149157611490612474565b5b0217905550905050600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081908060018154018082558091505060019003906000526020600020016000909190919091505582600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461154e9190612ad3565b92505081905550600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611662576001600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506005339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b3373ffffffffffffffffffffffffffffffffffffffff16817ffb617c13a5b4b052ee893903dca019ab1611dfef1b20f7acb7a5bfe008c1026085426040516116ab929190612b3b565b60405180910390a3809150506116bf611f79565b919050565b80600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361176a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611761906129ac565b60405180910390fd5b813373ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461180f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161180690612a18565b60405180910390fd5b611817611f33565b60006002600085815260200190815260200160002090506002600381111561184257611841612474565b5b8160050160009054906101000a900460ff16600381111561186657611865612474565b5b146118a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161189d90612bb0565b60405180910390fd5b60018160050160006101000a81548160ff021916908360038111156118ce576118cd612474565b5b0217905550600081600301819055508060020154600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546119309190612ad3565b925050819055503373ffffffffffffffffffffffffffffffffffffffff16847fe372915d347984c68379c4f420399841c8a334216a05e56653a1f93e1f53e9f983600201546040516119829190612366565b60405180910390a350611993611f79565b505050565b60066020528060005260406000206000915054906101000a900460ff1681565b600080600260008481526020019081526020016000206040518060c0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820154815260200160038201548152602001600482015481526020016005820160009054906101000a900460ff166003811115611a7c57611a7b612474565b5b6003811115611a8e57611a8d612474565b5b81525050905060026003811115611aa857611aa7612474565b5b8160a001516003811115611abf57611abe612474565b5b148015611ad0575080606001514210155b915050919050565b606060006005805490509050808410611b425760008367ffffffffffffffff811115611b0757611b06612c84565b5b604051908082528060200260200182016040528015611b355781602001602082028036833780820191505090505b5090508092505050611c73565b6000839050818486611b549190612ad3565b1115611b69578482611b669190612b07565b90505b60008167ffffffffffffffff811115611b8557611b84612c84565b5b604051908082528060200260200182016040528015611bb35781602001602082028036833780820191505090505b50905060005b82811015611c6b5760058188611bcf9190612ad3565b81548110611be057611bdf612cb3565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16828281518110611c1e57611c1d612cb3565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508080611c6390612c3c565b915050611bb9565b508093505050505b92915050565b611c81612126565b600260008381526020019081526020016000206040518060c0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820154815260200160038201548152602001600482015481526020016005820160009054906101000a900460ff166003811115611d4257611d41612474565b5b6003811115611d5457611d53612474565b5b815250509050919050565b60606000600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600081805490509050808510611e0757600067ffffffffffffffff811115611dcf57611dce612c84565b5b604051908082528060200260200182016040528015611dfd5781602001602082028036833780820191505090505b5092505050611eed565b60008486611e159190612ad3565b905081811115611e23578190505b60008682611e319190612b07565b67ffffffffffffffff811115611e4a57611e49612c84565b5b604051908082528060200260200182016040528015611e785781602001602082028036833780820191505090505b50905060008790505b82811015611ee457848181548110611e9c57611e9b612cb3565b5b9060005260206000200154828983611eb49190612b07565b81518110611ec557611ec4612cb3565b5b6020026020010181815250508080611edc90612c3c565b915050611e81565b50809450505050505b9392505050565b60058181548110611f0457600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260005403611f6f576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600081905550565b6001600081905550565b611ffd838473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8585604051602401611fb6929190612d4e565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612084565b505050565b61207e848573ffffffffffffffffffffffffffffffffffffffff166323b872dd86868660405160240161203793929190612d77565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612084565b50505050565b600080602060008451602086016000885af1806120a7576040513d6000823e3d81fd5b3d9250600051915050600082146120c25760018114156120de565b60008473ffffffffffffffffffffffffffffffffffffffff163b145b1561212057836040517f5274afe70000000000000000000000000000000000000000000000000000000081526004016121179190612934565b60405180910390fd5b50505050565b6040518060c0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600081526020016000600381111561217e5761217d612474565b5b81525090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006121b482612189565b9050919050565b6121c4816121a9565b81146121cf57600080fd5b50565b6000813590506121e1816121bb565b92915050565b6000602082840312156121fd576121fc612184565b5b600061220b848285016121d2565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b61225381612240565b82525050565b6000612265838361224a565b60208301905092915050565b6000602082019050919050565b600061228982612214565b612293818561221f565b935061229e83612230565b8060005b838110156122cf5781516122b68882612259565b97506122c183612271565b9250506001810190506122a2565b5085935050505092915050565b600060208201905081810360008301526122f6818461227e565b905092915050565b61230781612240565b811461231257600080fd5b50565b600081359050612324816122fe565b92915050565b6000602082840312156123405761233f612184565b5b600061234e84828501612315565b91505092915050565b61236081612240565b82525050565b600060208201905061237b6000830184612357565b92915050565b6000806040838503121561239857612397612184565b5b60006123a6858286016121d2565b92505060206123b785828601612315565b9150509250929050565b600481106123ce57600080fd5b50565b6000813590506123e0816123c1565b92915050565b6000806000606084860312156123ff576123fe612184565b5b600061240d868287016123d1565b935050602061241e86828701612315565b925050604061242f86828701612315565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61246e816121a9565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600481106124b4576124b3612474565b5b50565b60008190506124c5826124a3565b919050565b60006124d5826124b7565b9050919050565b6124e5816124ca565b82525050565b60c082016000820151612501600085018261224a565b5060208201516125146020850182612465565b506040820151612527604085018261224a565b50606082015161253a606085018261224a565b50608082015161254d608085018261224a565b5060a082015161256060a08501826124dc565b50505050565b600061257283836124eb565b60c08301905092915050565b6000602082019050919050565b600061259682612439565b6125a08185612444565b93506125ab83612455565b8060005b838110156125dc5781516125c38882612566565b97506125ce8361257e565b9250506001810190506125af565b5085935050505092915050565b60006020820190508181036000830152612603818461258b565b905092915050565b6000806040838503121561262257612621612184565b5b600061263085828601612315565b925050602061264185828601612315565b9150509250929050565b612654816121a9565b82525050565b612663816124ca565b82525050565b600060c08201905061267e6000830189612357565b61268b602083018861264b565b6126986040830187612357565b6126a56060830186612357565b6126b26080830185612357565b6126bf60a083018461265a565b979650505050505050565b6000819050919050565b60006126ef6126ea6126e584612189565b6126ca565b612189565b9050919050565b6000612701826126d4565b9050919050565b6000612713826126f6565b9050919050565b61272381612708565b82525050565b600060208201905061273e600083018461271a565b92915050565b60008115159050919050565b61275981612744565b82525050565b60006020820190506127746000830184612750565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006127b28383612465565b60208301905092915050565b6000602082019050919050565b60006127d68261277a565b6127e08185612785565b93506127eb83612796565b8060005b8381101561281c57815161280388826127a6565b975061280e836127be565b9250506001810190506127ef565b5085935050505092915050565b6000602082019050818103600083015261284381846127cb565b905092915050565b60c082016000820151612861600085018261224a565b5060208201516128746020850182612465565b506040820151612887604085018261224a565b50606082015161289a606085018261224a565b5060808201516128ad608085018261224a565b5060a08201516128c060a08501826124dc565b50505050565b600060c0820190506128db600083018461284b565b92915050565b6000806000606084860312156128fa576128f9612184565b5b6000612908868287016121d2565b935050602061291986828701612315565b925050604061292a86828701612315565b9150509250925092565b6000602082019050612949600083018461264b565b92915050565b600082825260208201905092915050565b7f506f736974696f6e20646f6573206e6f74206578697374000000000000000000600082015250565b600061299660178361294f565b91506129a182612960565b602082019050919050565b600060208201905081810360008301526129c581612989565b9050919050565b7f4e6f7420706f736974696f6e206f776e65720000000000000000000000000000600082015250565b6000612a0260128361294f565b9150612a0d826129cc565b602082019050919050565b60006020820190508181036000830152612a31816129f5565b9050919050565b7f506f736974696f6e206e6f742061637469766500000000000000000000000000600082015250565b6000612a6e60138361294f565b9150612a7982612a38565b602082019050919050565b60006020820190508181036000830152612a9d81612a61565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612ade82612240565b9150612ae983612240565b9250828201905080821115612b0157612b00612aa4565b5b92915050565b6000612b1282612240565b9150612b1d83612240565b9250828203905081811115612b3557612b34612aa4565b5b92915050565b6000604082019050612b506000830185612357565b612b5d6020830184612357565b9392505050565b7f506f736974696f6e206e6f742070656e64696e67000000000000000000000000600082015250565b6000612b9a60148361294f565b9150612ba582612b64565b602082019050919050565b60006020820190508181036000830152612bc981612b8d565b9050919050565b7f4c6f636b20706572696f64206e6f7420656e6465640000000000000000000000600082015250565b6000612c0660158361294f565b9150612c1182612bd0565b602082019050919050565b60006020820190508181036000830152612c3581612bf9565b9050919050565b6000612c4782612240565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612c7957612c78612aa4565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f416d6f756e74206d7573742062652067726561746572207468616e207a65726f600082015250565b6000612d1860208361294f565b9150612d2382612ce2565b602082019050919050565b60006020820190508181036000830152612d4781612d0b565b9050919050565b6000604082019050612d63600083018561264b565b612d706020830184612357565b9392505050565b6000606082019050612d8c600083018661264b565b612d99602083018561264b565b612da66040830184612357565b94935050505056fea2646970667358221220988c8b759dad33fa3c636d5bfdb50bd35fdd7e9c12e6a824f3a17d4ca540134964736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101425760003560e01c806399fbab88116100b8578063c3c5a5471161007c578063c3c5a547146103da578063c95c0d891461040a578063d71c3e411461043a578063eb02c3011461046a578063eb33b7501461049a578063fd5e6dd1146104ca57610142565b806399fbab881461030b5780639ae17af4146103405780639bfd8d611461035e578063a694fc3a1461038e578063bce1b520146103be57610142565b80635e1b4d991161010a5780635e1b4d991461020f57806360e1ce8d1461023f5780636e2f16961461026f5780636e99d52f1461029f5780638230252d146102bd578063899346c7146102ed57610142565b80632a6bc2dd146101475780632e17de78146101775780632f6fe5f71461019357806331e8a7ef146101c3578063379607f5146101f3575b600080fd5b610161600480360381019061015c91906121e7565b6104fa565b60405161016e91906122dc565b60405180910390f35b610191600480360381019061018c919061232a565b610591565b005b6101ad60048036038101906101a8919061232a565b610878565b6040516101ba9190612366565b60405180910390f35b6101dd60048036038101906101d891906121e7565b6109bc565b6040516101ea9190612366565b60405180910390f35b61020d6004803603810190610208919061232a565b610a08565b005b61022960048036038101906102249190612381565b610d10565b6040516102369190612366565b60405180910390f35b610259600480360381019061025491906123e6565b610d41565b60405161026691906125e9565b60405180910390f35b610289600480360381019061028491906121e7565b611001565b6040516102969190612366565b60405180910390f35b6102a761104a565b6040516102b49190612366565b60405180910390f35b6102d760048036038101906102d2919061260b565b611051565b6040516102e491906125e9565b60405180910390f35b6102f561122d565b6040516103029190612366565b60405180910390f35b6103256004803603810190610320919061232a565b611233565b60405161033796959493929190612669565b60405180910390f35b61034861129c565b6040516103559190612729565b60405180910390f35b610378600480360381019061037391906121e7565b6112c0565b6040516103859190612366565b60405180910390f35b6103a860048036038101906103a3919061232a565b6112d8565b6040516103b59190612366565b60405180910390f35b6103d860048036038101906103d3919061232a565b6116c4565b005b6103f460048036038101906103ef91906121e7565b611998565b604051610401919061275f565b60405180910390f35b610424600480360381019061041f919061232a565b6119b8565b604051610431919061275f565b60405180910390f35b610454600480360381019061044f919061260b565b611ad8565b6040516104619190612829565b60405180910390f35b610484600480360381019061047f919061232a565b611c79565b60405161049191906128c6565b60405180910390f35b6104b460048036038101906104af91906128e1565b611d5f565b6040516104c191906122dc565b60405180910390f35b6104e460048036038101906104df919061232a565b611ef4565b6040516104f19190612934565b60405180910390f35b6060600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561058557602002820191906000526020600020905b815481526020019060010190808311610571575b50505050509050919050565b80600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610637576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062e906129ac565b60405180910390fd5b813373ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146106dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d390612a18565b60405180910390fd5b6106e4611f33565b60006002600085815260200190815260200160002090506001600381111561070f5761070e612474565b5b8160050160009054906101000a900460ff16600381111561073357610732612474565b5b14610773576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076a90612a84565b60405180910390fd5b60028160050160006101000a81548160ff0219169083600381111561079b5761079a612474565b5b021790555062127500426107af9190612ad3565b81600301819055508060020154600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461080a9190612b07565b925050819055503373ffffffffffffffffffffffffffffffffffffffff16847ff69bed7fd866b8ff5e2d7b9ca384c57a26024d067d128ea7f01152351d6d085b83600201548460030154604051610862929190612b3b565b60405180910390a350610873611f79565b505050565b600080600260008481526020019081526020016000206040518060c0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820154815260200160038201548152602001600482015481526020016005820160009054906101000a900460ff16600381111561093c5761093b612474565b5b600381111561094e5761094d612474565b5b8152505090506002600381111561096857610967612474565b5b8160a00151600381111561097f5761097e612474565b5b1461098e5760009150506109b7565b806060015142106109a35760009150506109b7565b4281606001516109b39190612b07565b9150505b919050565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050919050565b80600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610aae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aa5906129ac565b60405180910390fd5b813373ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610b53576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4a90612a18565b60405180910390fd5b610b5b611f33565b600060026000858152602001908152602001600020905060026003811115610b8657610b85612474565b5b8160050160009054906101000a900460ff166003811115610baa57610ba9612474565b5b14610bea576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610be190612bb0565b60405180910390fd5b8060030154421015610c31576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c2890612c1c565b60405180910390fd5b60008160020154905060038260050160006101000a81548160ff02191690836003811115610c6257610c61612474565b5b0217905550610cb233827f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16611f839092919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff16857ff18ca9717b47ea7629d17b5d7b2ede46e864155725629e7d0347924c2f6d112d83604051610cf99190612366565b60405180910390a35050610d0b611f79565b505050565b60036020528160005260406000208181548110610d2c57600080fd5b90600052602060002001600091509150505481565b6060600080600190505b600154811015610dc557856003811115610d6857610d67612474565b5b6002600083815260200190815260200160002060050160009054906101000a900460ff166003811115610d9e57610d9d612474565b5b03610db2578180610dae90612c3c565b9250505b8080610dbd90612c3c565b915050610d4b565b5060008367ffffffffffffffff811115610de257610de1612c84565b5b604051908082528060200260200182016040528015610e1b57816020015b610e08612126565b815260200190600190039081610e005790505b509050818510610e2f578092505050610ffa565b6000849050828587610e419190612ad3565b1115610e56578583610e539190612b07565b90505b6000806000600190505b60015481108015610e7057508383105b15610ff057896003811115610e8857610e87612474565b5b6002600083815260200190815260200160002060050160009054906101000a900460ff166003811115610ebe57610ebd612474565b5b03610fdd57888210610fce57600260008281526020019081526020016000206040518060c0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820154815260200160038201548152602001600482015481526020016005820160009054906101000a900460ff166003811115610f8b57610f8a612474565b5b6003811115610f9d57610f9c612474565b5b81525050858481518110610fb457610fb3612cb3565b5b60200260200101819052508280610fca90612c3c565b9350505b8180610fd990612c3c565b9250505b8080610fe890612c3c565b915050610e60565b5083955050505050505b9392505050565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6212750081565b60606000600180546110639190612b07565b905060008367ffffffffffffffff81111561108157611080612c84565b5b6040519080825280602002602001820160405280156110ba57816020015b6110a7612126565b81526020019060019003908161109f5790505b5090508185106110ce578092505050611227565b60008490508285876110e09190612ad3565b11156110f55785836110f29190612b07565b90505b60005b8181101561121f57600260008260018a6111129190612ad3565b61111c9190612ad3565b81526020019081526020016000206040518060c0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820154815260200160038201548152602001600482015481526020016005820160009054906101000a900460ff1660038111156111d8576111d7612474565b5b60038111156111ea576111e9612474565b5b8152505083828151811061120157611200612cb3565b5b6020026020010181905250808061121790612c3c565b9150506110f8565b508193505050505b92915050565b60015481565b60026020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030154908060040154908060050160009054906101000a900460ff16905086565b7f000000000000000000000000000000000000000000000000000000000000000081565b60046020528060005260406000206000915090505481565b60006112e2611f33565b60008211611325576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161131c90612d2e565b60405180910390fd5b6113723330847f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16612002909392919063ffffffff16565b60006001600081548092919061138790612c3c565b9190505590506040518060c001604052808281526020013373ffffffffffffffffffffffffffffffffffffffff16815260200184815260200160008152602001428152602001600160038111156113e1576113e0612474565b5b815250600260008381526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020155606082015181600301556080820151816004015560a08201518160050160006101000a81548160ff0219169083600381111561149157611490612474565b5b0217905550905050600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081908060018154018082558091505060019003906000526020600020016000909190919091505582600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461154e9190612ad3565b92505081905550600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611662576001600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506005339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b3373ffffffffffffffffffffffffffffffffffffffff16817ffb617c13a5b4b052ee893903dca019ab1611dfef1b20f7acb7a5bfe008c1026085426040516116ab929190612b3b565b60405180910390a3809150506116bf611f79565b919050565b80600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361176a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611761906129ac565b60405180910390fd5b813373ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461180f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161180690612a18565b60405180910390fd5b611817611f33565b60006002600085815260200190815260200160002090506002600381111561184257611841612474565b5b8160050160009054906101000a900460ff16600381111561186657611865612474565b5b146118a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161189d90612bb0565b60405180910390fd5b60018160050160006101000a81548160ff021916908360038111156118ce576118cd612474565b5b0217905550600081600301819055508060020154600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546119309190612ad3565b925050819055503373ffffffffffffffffffffffffffffffffffffffff16847fe372915d347984c68379c4f420399841c8a334216a05e56653a1f93e1f53e9f983600201546040516119829190612366565b60405180910390a350611993611f79565b505050565b60066020528060005260406000206000915054906101000a900460ff1681565b600080600260008481526020019081526020016000206040518060c0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820154815260200160038201548152602001600482015481526020016005820160009054906101000a900460ff166003811115611a7c57611a7b612474565b5b6003811115611a8e57611a8d612474565b5b81525050905060026003811115611aa857611aa7612474565b5b8160a001516003811115611abf57611abe612474565b5b148015611ad0575080606001514210155b915050919050565b606060006005805490509050808410611b425760008367ffffffffffffffff811115611b0757611b06612c84565b5b604051908082528060200260200182016040528015611b355781602001602082028036833780820191505090505b5090508092505050611c73565b6000839050818486611b549190612ad3565b1115611b69578482611b669190612b07565b90505b60008167ffffffffffffffff811115611b8557611b84612c84565b5b604051908082528060200260200182016040528015611bb35781602001602082028036833780820191505090505b50905060005b82811015611c6b5760058188611bcf9190612ad3565b81548110611be057611bdf612cb3565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16828281518110611c1e57611c1d612cb3565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508080611c6390612c3c565b915050611bb9565b508093505050505b92915050565b611c81612126565b600260008381526020019081526020016000206040518060c0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820154815260200160038201548152602001600482015481526020016005820160009054906101000a900460ff166003811115611d4257611d41612474565b5b6003811115611d5457611d53612474565b5b815250509050919050565b60606000600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600081805490509050808510611e0757600067ffffffffffffffff811115611dcf57611dce612c84565b5b604051908082528060200260200182016040528015611dfd5781602001602082028036833780820191505090505b5092505050611eed565b60008486611e159190612ad3565b905081811115611e23578190505b60008682611e319190612b07565b67ffffffffffffffff811115611e4a57611e49612c84565b5b604051908082528060200260200182016040528015611e785781602001602082028036833780820191505090505b50905060008790505b82811015611ee457848181548110611e9c57611e9b612cb3565b5b9060005260206000200154828983611eb49190612b07565b81518110611ec557611ec4612cb3565b5b6020026020010181815250508080611edc90612c3c565b915050611e81565b50809450505050505b9392505050565b60058181548110611f0457600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260005403611f6f576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600081905550565b6001600081905550565b611ffd838473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8585604051602401611fb6929190612d4e565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612084565b505050565b61207e848573ffffffffffffffffffffffffffffffffffffffff166323b872dd86868660405160240161203793929190612d77565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612084565b50505050565b600080602060008451602086016000885af1806120a7576040513d6000823e3d81fd5b3d9250600051915050600082146120c25760018114156120de565b60008473ffffffffffffffffffffffffffffffffffffffff163b145b1561212057836040517f5274afe70000000000000000000000000000000000000000000000000000000081526004016121179190612934565b60405180910390fd5b50505050565b6040518060c0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600081526020016000600381111561217e5761217d612474565b5b81525090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006121b482612189565b9050919050565b6121c4816121a9565b81146121cf57600080fd5b50565b6000813590506121e1816121bb565b92915050565b6000602082840312156121fd576121fc612184565b5b600061220b848285016121d2565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b61225381612240565b82525050565b6000612265838361224a565b60208301905092915050565b6000602082019050919050565b600061228982612214565b612293818561221f565b935061229e83612230565b8060005b838110156122cf5781516122b68882612259565b97506122c183612271565b9250506001810190506122a2565b5085935050505092915050565b600060208201905081810360008301526122f6818461227e565b905092915050565b61230781612240565b811461231257600080fd5b50565b600081359050612324816122fe565b92915050565b6000602082840312156123405761233f612184565b5b600061234e84828501612315565b91505092915050565b61236081612240565b82525050565b600060208201905061237b6000830184612357565b92915050565b6000806040838503121561239857612397612184565b5b60006123a6858286016121d2565b92505060206123b785828601612315565b9150509250929050565b600481106123ce57600080fd5b50565b6000813590506123e0816123c1565b92915050565b6000806000606084860312156123ff576123fe612184565b5b600061240d868287016123d1565b935050602061241e86828701612315565b925050604061242f86828701612315565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61246e816121a9565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600481106124b4576124b3612474565b5b50565b60008190506124c5826124a3565b919050565b60006124d5826124b7565b9050919050565b6124e5816124ca565b82525050565b60c082016000820151612501600085018261224a565b5060208201516125146020850182612465565b506040820151612527604085018261224a565b50606082015161253a606085018261224a565b50608082015161254d608085018261224a565b5060a082015161256060a08501826124dc565b50505050565b600061257283836124eb565b60c08301905092915050565b6000602082019050919050565b600061259682612439565b6125a08185612444565b93506125ab83612455565b8060005b838110156125dc5781516125c38882612566565b97506125ce8361257e565b9250506001810190506125af565b5085935050505092915050565b60006020820190508181036000830152612603818461258b565b905092915050565b6000806040838503121561262257612621612184565b5b600061263085828601612315565b925050602061264185828601612315565b9150509250929050565b612654816121a9565b82525050565b612663816124ca565b82525050565b600060c08201905061267e6000830189612357565b61268b602083018861264b565b6126986040830187612357565b6126a56060830186612357565b6126b26080830185612357565b6126bf60a083018461265a565b979650505050505050565b6000819050919050565b60006126ef6126ea6126e584612189565b6126ca565b612189565b9050919050565b6000612701826126d4565b9050919050565b6000612713826126f6565b9050919050565b61272381612708565b82525050565b600060208201905061273e600083018461271a565b92915050565b60008115159050919050565b61275981612744565b82525050565b60006020820190506127746000830184612750565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006127b28383612465565b60208301905092915050565b6000602082019050919050565b60006127d68261277a565b6127e08185612785565b93506127eb83612796565b8060005b8381101561281c57815161280388826127a6565b975061280e836127be565b9250506001810190506127ef565b5085935050505092915050565b6000602082019050818103600083015261284381846127cb565b905092915050565b60c082016000820151612861600085018261224a565b5060208201516128746020850182612465565b506040820151612887604085018261224a565b50606082015161289a606085018261224a565b5060808201516128ad608085018261224a565b5060a08201516128c060a08501826124dc565b50505050565b600060c0820190506128db600083018461284b565b92915050565b6000806000606084860312156128fa576128f9612184565b5b6000612908868287016121d2565b935050602061291986828701612315565b925050604061292a86828701612315565b9150509250925092565b6000602082019050612949600083018461264b565b92915050565b600082825260208201905092915050565b7f506f736974696f6e20646f6573206e6f74206578697374000000000000000000600082015250565b600061299660178361294f565b91506129a182612960565b602082019050919050565b600060208201905081810360008301526129c581612989565b9050919050565b7f4e6f7420706f736974696f6e206f776e65720000000000000000000000000000600082015250565b6000612a0260128361294f565b9150612a0d826129cc565b602082019050919050565b60006020820190508181036000830152612a31816129f5565b9050919050565b7f506f736974696f6e206e6f742061637469766500000000000000000000000000600082015250565b6000612a6e60138361294f565b9150612a7982612a38565b602082019050919050565b60006020820190508181036000830152612a9d81612a61565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612ade82612240565b9150612ae983612240565b9250828201905080821115612b0157612b00612aa4565b5b92915050565b6000612b1282612240565b9150612b1d83612240565b9250828203905081811115612b3557612b34612aa4565b5b92915050565b6000604082019050612b506000830185612357565b612b5d6020830184612357565b9392505050565b7f506f736974696f6e206e6f742070656e64696e67000000000000000000000000600082015250565b6000612b9a60148361294f565b9150612ba582612b64565b602082019050919050565b60006020820190508181036000830152612bc981612b8d565b9050919050565b7f4c6f636b20706572696f64206e6f7420656e6465640000000000000000000000600082015250565b6000612c0660158361294f565b9150612c1182612bd0565b602082019050919050565b60006020820190508181036000830152612c3581612bf9565b9050919050565b6000612c4782612240565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612c7957612c78612aa4565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f416d6f756e74206d7573742062652067726561746572207468616e207a65726f600082015250565b6000612d1860208361294f565b9150612d2382612ce2565b602082019050919050565b60006020820190508181036000830152612d4781612d0b565b9050919050565b6000604082019050612d63600083018561264b565b612d706020830184612357565b9392505050565b6000606082019050612d8c600083018661264b565b612d99602083018561264b565b612da66040830184612357565b94935050505056fea2646970667358221220988c8b759dad33fa3c636d5bfdb50bd35fdd7e9c12e6a824f3a17d4ca540134964736f6c63430008140033",
  "devdoc": {
    "details": "Staking contract for $ROOM tokens with 2-week lock period Features: - Unlimited number of positions per user - Each stake creates a unique position with positionId - 2-week lock period for unstaked tokens - Restake function to return pending tokens to active staking",
    "errors": {
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC-20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "canClaim(uint256)": {
        "details": "Check if position can be claimed",
        "params": {
          "positionId": "ID of the position"
        },
        "returns": {
          "_0": "True if position can be claimed"
        }
      },
      "claim(uint256)": {
        "details": "Claim tokens after lock period has ended",
        "params": {
          "positionId": "ID of the position to claim"
        }
      },
      "getPosition(uint256)": {
        "details": "Get position details",
        "params": {
          "positionId": "ID of the position"
        },
        "returns": {
          "_0": "Position struct"
        }
      },
      "getTimeUntilUnlock(uint256)": {
        "details": "Get time remaining until position can be claimed",
        "params": {
          "positionId": "ID of the position"
        },
        "returns": {
          "_0": "Time remaining in seconds (0 if not pending or already unlockable)"
        }
      },
      "getUserTotalStaked(address)": {
        "details": "Get user's total staked amount",
        "params": {
          "user": "Address of the user"
        },
        "returns": {
          "_0": "Total staked amount"
        }
      },
      "restake(uint256)": {
        "details": "Restake tokens from a pending position (cancels lock period)",
        "params": {
          "positionId": "ID of the position to restake"
        }
      },
      "stake(uint256)": {
        "details": "Stake tokens and create a new position",
        "params": {
          "amount": "Amount of tokens to stake"
        },
        "returns": {
          "_0": "positionId The ID of the created position"
        }
      },
      "unstake(uint256)": {
        "details": "Unstake tokens from a position (starts lock period)",
        "params": {
          "positionId": "ID of the position to unstake"
        }
      }
    },
    "title": "Staking",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 642,
        "contract": "contracts/Staking.sol:Staking",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 743,
        "contract": "contracts/Staking.sol:Staking",
        "label": "nextPositionId",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 748,
        "contract": "contracts/Staking.sol:Staking",
        "label": "positions",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(Position)1642_storage)"
      },
      {
        "astId": 753,
        "contract": "contracts/Staking.sol:Staking",
        "label": "userPositions",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 757,
        "contract": "contracts/Staking.sol:Staking",
        "label": "totalStaked",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 760,
        "contract": "contracts/Staking.sol:Staking",
        "label": "stakers",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 764,
        "contract": "contracts/Staking.sol:Staking",
        "label": "isRegistered",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(PositionStatus)1628": {
        "encoding": "inplace",
        "label": "enum IStaking.PositionStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Position)1642_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IStaking.Position)",
        "numberOfBytes": "32",
        "value": "t_struct(Position)1642_storage"
      },
      "t_struct(Position)1642_storage": {
        "encoding": "inplace",
        "label": "struct IStaking.Position",
        "members": [
          {
            "astId": 1630,
            "contract": "contracts/Staking.sol:Staking",
            "label": "positionId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1632,
            "contract": "contracts/Staking.sol:Staking",
            "label": "owner",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1634,
            "contract": "contracts/Staking.sol:Staking",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1636,
            "contract": "contracts/Staking.sol:Staking",
            "label": "unlockTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1638,
            "contract": "contracts/Staking.sol:Staking",
            "label": "stakeTime",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1641,
            "contract": "contracts/Staking.sol:Staking",
            "label": "status",
            "offset": 0,
            "slot": "5",
            "type": "t_enum(PositionStatus)1628"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}