{
  "address": "0x5c910b67EbF8F897CE96CBEc20Baa0Acb0a2De25",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_roomToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PositionClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stakeTime",
          "type": "uint256"
        }
      ],
      "name": "PositionCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PositionRestaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unlockTime",
          "type": "uint256"
        }
      ],
      "name": "PositionUnstaked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "COOLDOWN_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        }
      ],
      "name": "canClaim",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        }
      ],
      "name": "getPosition",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "positionId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "unlockTime",
              "type": "uint256"
            },
            {
              "internalType": "enum IStaking.PositionStatus",
              "name": "status",
              "type": "uint8"
            }
          ],
          "internalType": "struct IStaking.Position",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        }
      ],
      "name": "getTimeUntilUnlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserPositions",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserTotalStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextPositionId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "positions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unlockTime",
          "type": "uint256"
        },
        {
          "internalType": "enum IStaking.PositionStatus",
          "name": "status",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        }
      ],
      "name": "restake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roomToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "totalStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "positionId",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userPositions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe5aebc6ed0d126800f0b30fcb75882de39e912ee9c93d6f6656c3eb42ea9811c",
  "receipt": {
    "to": null,
    "from": "0x1922d63490E4c8ad8F88D7023dFaE99609231d45",
    "contractAddress": "0x5c910b67EbF8F897CE96CBEc20Baa0Acb0a2De25",
    "transactionIndex": 10,
    "gasUsed": "1804776",
    "logsBloom": "0x
    "blockHash": "0x5259af855e39caed884cc0fd0caf05b00a6b8cdba85765b7869b7b1fdf365bc1",
    "transactionHash": "0xe5aebc6ed0d126800f0b30fcb75882de39e912ee9c93d6f6656c3eb42ea9811c",
    "logs": [],
    "blockNumber": 32801197,
    "cumulativeGasUsed": "3753106",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x21Cc998e627Ba6c18a134153341A6771996Ef304"
  ],
  "numDeployments": 2,
  "solcInputHash": "0d15dd6d8c1b13a7b63e1c1494723154",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_roomToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PositionClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakeTime\",\"type\":\"uint256\"}],\"name\":\"PositionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PositionRestaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"name\":\"PositionUnstaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"COOLDOWN_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"}],\"name\":\"canClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"}],\"name\":\"getPosition\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"enum IStaking.PositionStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct IStaking.Position\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"}],\"name\":\"getTimeUntilUnlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserPositions\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserTotalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextPositionId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"enum IStaking.PositionStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"}],\"name\":\"restake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roomToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userPositions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Staking contract for $ROOM tokens with 2-week lock period Features: - Unlimited number of positions per user - Each stake creates a unique position with positionId - 2-week lock period for unstaked tokens - Restake function to return pending tokens to active staking\",\"errors\":{\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"canClaim(uint256)\":{\"details\":\"Check if position can be claimed\",\"params\":{\"positionId\":\"ID of the position\"},\"returns\":{\"_0\":\"True if position can be claimed\"}},\"claim(uint256)\":{\"details\":\"Claim tokens after lock period has ended\",\"params\":{\"positionId\":\"ID of the position to claim\"}},\"getPosition(uint256)\":{\"details\":\"Get position details\",\"params\":{\"positionId\":\"ID of the position\"},\"returns\":{\"_0\":\"Position struct\"}},\"getTimeUntilUnlock(uint256)\":{\"details\":\"Get time remaining until position can be claimed\",\"params\":{\"positionId\":\"ID of the position\"},\"returns\":{\"_0\":\"Time remaining in seconds (0 if not pending or already unlockable)\"}},\"getUserPositions(address)\":{\"details\":\"Get all position IDs for a user\",\"params\":{\"user\":\"Address of the user\"},\"returns\":{\"_0\":\"Array of position IDs\"}},\"getUserTotalStaked(address)\":{\"details\":\"Get user's total staked amount\",\"params\":{\"user\":\"Address of the user\"},\"returns\":{\"_0\":\"Total staked amount\"}},\"restake(uint256)\":{\"details\":\"Restake tokens from a pending position (cancels lock period)\",\"params\":{\"positionId\":\"ID of the position to restake\"}},\"stake(uint256)\":{\"details\":\"Stake tokens and create a new position\",\"params\":{\"amount\":\"Amount of tokens to stake\"},\"returns\":{\"_0\":\"positionId The ID of the created position\"}},\"unstake(uint256)\":{\"details\":\"Unstake tokens from a position (starts lock period)\",\"params\":{\"positionId\":\"ID of the position to unstake\"}}},\"title\":\"Staking\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Staking.sol\":\"Staking\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x982c5cb790ab941d1e04f807120a71709d4c313ba0bfc16006447ffbd27fbbd5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"contracts/Staking.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport {IStaking} from \\\"./interfaces/IStaking.sol\\\";\\n\\n/**\\n * @title Staking\\n * @dev Staking contract for $ROOM tokens with 2-week lock period\\n * Features:\\n * - Unlimited number of positions per user\\n * - Each stake creates a unique position with positionId\\n * - 2-week lock period for unstaked tokens\\n * - Restake function to return pending tokens to active staking\\n */\\ncontract Staking is ReentrancyGuard, IStaking {\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public immutable roomToken;\\n\\n    uint256 public constant COOLDOWN_PERIOD = 2 weeks;\\n    uint256 public nextPositionId = 1;\\n\\n    mapping(uint256 => Position) public positions;\\n    mapping(address => uint256[]) public userPositions;\\n    mapping(address => uint256) public totalStaked;\\n\\n    modifier onlyPositionOwner(uint256 positionId) {\\n        require(\\n            positions[positionId].owner == msg.sender,\\n            \\\"Not position owner\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier positionExists(uint256 positionId) {\\n        require(\\n            positions[positionId].owner != address(0),\\n            \\\"Position does not exist\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(address _roomToken) {\\n        require(_roomToken != address(0), \\\"ROOM token address cannot be zero\\\");\\n        roomToken = IERC20(_roomToken);\\n    }\\n\\n    /**\\n     * @dev Stake tokens and create a new position\\n     * @param amount Amount of tokens to stake\\n     * @return positionId The ID of the created position\\n     */\\n    function stake(uint256 amount) external nonReentrant returns (uint256) {\\n        require(amount > 0, \\\"Amount must be greater than zero\\\");\\n        roomToken.safeTransferFrom(msg.sender, address(this), amount);\\n\\n        uint256 positionId = nextPositionId++;\\n        positions[positionId] = Position({\\n            positionId: positionId,\\n            owner: msg.sender,\\n            amount: amount,\\n            unlockTime: 0,\\n            status: PositionStatus.Active\\n        });\\n\\n        userPositions[msg.sender].push(positionId);\\n        totalStaked[msg.sender] += amount;\\n\\n        emit PositionCreated(positionId, msg.sender, amount, block.timestamp);\\n\\n        return positionId;\\n    }\\n\\n    /**\\n     * @dev Unstake tokens from a position (starts lock period)\\n     * @param positionId ID of the position to unstake\\n     */\\n    function unstake(\\n        uint256 positionId\\n    )\\n        external\\n        positionExists(positionId)\\n        onlyPositionOwner(positionId)\\n        nonReentrant\\n    {\\n        Position storage position = positions[positionId];\\n        require(\\n            position.status == PositionStatus.Active,\\n            \\\"Position not active\\\"\\n        );\\n\\n        position.status = PositionStatus.Pending;\\n        position.unlockTime = block.timestamp + COOLDOWN_PERIOD;\\n\\n        totalStaked[msg.sender] -= position.amount;\\n\\n        emit PositionUnstaked(\\n            positionId,\\n            msg.sender,\\n            position.amount,\\n            position.unlockTime\\n        );\\n    }\\n\\n    /**\\n     * @dev Claim tokens after lock period has ended\\n     * @param positionId ID of the position to claim\\n     */\\n    function claim(\\n        uint256 positionId\\n    )\\n        external\\n        positionExists(positionId)\\n        onlyPositionOwner(positionId)\\n        nonReentrant\\n    {\\n        Position storage position = positions[positionId];\\n        require(\\n            position.status == PositionStatus.Pending,\\n            \\\"Position not pending\\\"\\n        );\\n        require(\\n            block.timestamp >= position.unlockTime,\\n            \\\"Lock period not ended\\\"\\n        );\\n\\n        uint256 amount = position.amount;\\n        position.status = PositionStatus.Claimed;\\n\\n        roomToken.safeTransfer(msg.sender, amount);\\n\\n        emit PositionClaimed(positionId, msg.sender, amount);\\n    }\\n\\n    /**\\n     * @dev Restake tokens from a pending position (cancels lock period)\\n     * @param positionId ID of the position to restake\\n     */\\n    function restake(\\n        uint256 positionId\\n    )\\n        external\\n        positionExists(positionId)\\n        onlyPositionOwner(positionId)\\n        nonReentrant\\n    {\\n        Position storage position = positions[positionId];\\n        require(\\n            position.status == PositionStatus.Pending,\\n            \\\"Position not pending\\\"\\n        );\\n\\n        position.status = PositionStatus.Active;\\n        position.unlockTime = 0;\\n\\n        totalStaked[msg.sender] += position.amount;\\n\\n        emit PositionRestaked(positionId, msg.sender, position.amount);\\n    }\\n\\n    /**\\n     * @dev Get all position IDs for a user\\n     * @param user Address of the user\\n     * @return Array of position IDs\\n     */\\n    function getUserPositions(\\n        address user\\n    ) external view returns (uint256[] memory) {\\n        return userPositions[user];\\n    }\\n\\n    /**\\n     * @dev Get position details\\n     * @param positionId ID of the position\\n     * @return Position struct\\n     */\\n    function getPosition(\\n        uint256 positionId\\n    ) external view returns (Position memory) {\\n        return positions[positionId];\\n    }\\n\\n    /**\\n     * @dev Get user's total staked amount\\n     * @param user Address of the user\\n     * @return Total staked amount\\n     */\\n    function getUserTotalStaked(address user) external view returns (uint256) {\\n        return totalStaked[user];\\n    }\\n\\n    /**\\n     * @dev Get time remaining until position can be claimed\\n     * @param positionId ID of the position\\n     * @return Time remaining in seconds (0 if not pending or already unlockable)\\n     */\\n    function getTimeUntilUnlock(\\n        uint256 positionId\\n    ) external view returns (uint256) {\\n        Position memory position = positions[positionId];\\n        if (position.status != PositionStatus.Pending) {\\n            return 0;\\n        }\\n        if (block.timestamp >= position.unlockTime) {\\n            return 0;\\n        }\\n        return position.unlockTime - block.timestamp;\\n    }\\n\\n    /**\\n     * @dev Check if position can be claimed\\n     * @param positionId ID of the position\\n     * @return True if position can be claimed\\n     */\\n    function canClaim(uint256 positionId) external view returns (bool) {\\n        Position memory position = positions[positionId];\\n        return\\n            position.status == PositionStatus.Pending &&\\n            block.timestamp >= position.unlockTime;\\n    }\\n}\\n\",\"keccak256\":\"0xdf1978eeb4a64d51630cece05f64faec5938b0e5b3d897d9557a45de650010a6\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IStaking.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\ninterface IStaking {\\n    enum PositionStatus {\\n        None,\\n        Active,\\n        Pending,\\n        Claimed\\n    }\\n\\n    struct Position {\\n        uint256 positionId;\\n        address owner;\\n        uint256 amount;\\n        uint256 unlockTime;\\n        PositionStatus status;\\n    }\\n\\n    event PositionCreated(\\n        uint256 indexed positionId,\\n        address indexed owner,\\n        uint256 amount,\\n        uint256 stakeTime\\n    );\\n\\n    event PositionUnstaked(\\n        uint256 indexed positionId,\\n        address indexed owner,\\n        uint256 amount,\\n        uint256 unlockTime\\n    );\\n\\n    event PositionClaimed(\\n        uint256 indexed positionId,\\n        address indexed owner,\\n        uint256 amount\\n    );\\n\\n    event PositionRestaked(\\n        uint256 indexed positionId,\\n        address indexed owner,\\n        uint256 amount\\n    );\\n}\\n\",\"keccak256\":\"0x14a097192a151d79ab6d04bb09d425b24c6b08b8db9ef1d5e661f1693e3bae2b\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60a0604052600180553480156200001557600080fd5b50604051620021393803806200213983398181016040528101906200003b91906200015a565b6001600081905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620000b5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000ac9062000213565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250505062000235565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200012282620000f5565b9050919050565b620001348162000115565b81146200014057600080fd5b50565b600081519050620001548162000129565b92915050565b600060208284031215620001735762000172620000f0565b5b6000620001838482850162000143565b91505092915050565b600082825260208201905092915050565b7f524f4f4d20746f6b656e20616464726573732063616e6e6f74206265207a657260008201527f6f00000000000000000000000000000000000000000000000000000000000000602082015250565b6000620001fb6021836200018c565b915062000208826200019d565b604082019050919050565b600060208201905081810360008301526200022e81620001ec565b9050919050565b608051611eda6200025f60003960008181610a7a01528181610c080152610c970152611eda6000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c8063899346c711610097578063a694fc3a11610066578063a694fc3a146102b0578063bce1b520146102e0578063c95c0d89146102fc578063eb02c3011461032c576100f5565b8063899346c71461021057806399fbab881461022e5780639ae17af4146102625780639bfd8d6114610280576100f5565b8063379607f5116100d3578063379607f5146101765780635e1b4d99146101925780636e2f1696146101c25780636e99d52f146101f2576100f5565b80632a6bc2dd146100fa5780632e17de781461012a5780632f6fe5f714610146575b600080fd5b610114600480360381019061010f9190611684565b61035c565b6040516101219190611779565b60405180910390f35b610144600480360381019061013f91906117c7565b6103f3565b005b610160600480360381019061015b91906117c7565b6106da565b60405161016d9190611803565b60405180910390f35b610190600480360381019061018b91906117c7565b610814565b005b6101ac60048036038101906101a7919061181e565b610b1c565b6040516101b99190611803565b60405180910390f35b6101dc60048036038101906101d79190611684565b610b4d565b6040516101e99190611803565b60405180910390f35b6101fa610b96565b6040516102079190611803565b60405180910390f35b610218610b9d565b6040516102259190611803565b60405180910390f35b610248600480360381019061024391906117c7565b610ba3565b6040516102599594939291906118e4565b60405180910390f35b61026a610c06565b6040516102779190611996565b60405180910390f35b61029a60048036038101906102959190611684565b610c2a565b6040516102a79190611803565b60405180910390f35b6102ca60048036038101906102c591906117c7565b610c42565b6040516102d79190611803565b60405180910390f35b6102fa60048036038101906102f591906117c7565b610f11565b005b610316600480360381019061031191906117c7565b6111e5565b60405161032391906119cc565b60405180910390f35b610346600480360381019061034191906117c7565b6112fb565b6040516103539190611a6d565b60405180910390f35b6060600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156103e757602002820191906000526020600020905b8154815260200190600101908083116103d3575b50505050509050919050565b80600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610499576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049090611ae5565b60405180910390fd5b813373ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461053e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053590611b51565b60405180910390fd5b6105466113d7565b6000600260008581526020019081526020016000209050600160038111156105715761057061186d565b5b8160040160009054906101000a900460ff1660038111156105955761059461186d565b5b146105d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105cc90611bbd565b60405180910390fd5b60028160040160006101000a81548160ff021916908360038111156105fd576105fc61186d565b5b021790555062127500426106119190611c0c565b81600301819055508060020154600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461066c9190611c40565b925050819055503373ffffffffffffffffffffffffffffffffffffffff16847ff69bed7fd866b8ff5e2d7b9ca384c57a26024d067d128ea7f01152351d6d085b836002015484600301546040516106c4929190611c74565b60405180910390a3506106d561141d565b505050565b600080600260008481526020019081526020016000206040518060a0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff1660038111156107945761079361186d565b5b60038111156107a6576107a561186d565b5b815250509050600260038111156107c0576107bf61186d565b5b816080015160038111156107d7576107d661186d565b5b146107e657600091505061080f565b806060015142106107fb57600091505061080f565b42816060015161080b9190611c40565b9150505b919050565b80600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036108ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b190611ae5565b60405180910390fd5b813373ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461095f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095690611b51565b60405180910390fd5b6109676113d7565b6000600260008581526020019081526020016000209050600260038111156109925761099161186d565b5b8160040160009054906101000a900460ff1660038111156109b6576109b561186d565b5b146109f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ed90611ce9565b60405180910390fd5b8060030154421015610a3d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3490611d55565b60405180910390fd5b60008160020154905060038260040160006101000a81548160ff02191690836003811115610a6e57610a6d61186d565b5b0217905550610abe33827f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166114279092919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff16857ff18ca9717b47ea7629d17b5d7b2ede46e864155725629e7d0347924c2f6d112d83604051610b059190611803565b60405180910390a35050610b1761141d565b505050565b60036020528160005260406000208181548110610b3857600080fd5b90600052602060002001600091509150505481565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6212750081565b60015481565b60026020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030154908060040160009054906101000a900460ff16905085565b7f000000000000000000000000000000000000000000000000000000000000000081565b60046020528060005260406000206000915090505481565b6000610c4c6113d7565b60008211610c8f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8690611dc1565b60405180910390fd5b610cdc3330847f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166114a6909392919063ffffffff16565b600060016000815480929190610cf190611de1565b9190505590506040518060a001604052808281526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018481526020016000815260200160016003811115610d4557610d4461186d565b5b815250600260008381526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201556060820151816003015560808201518160040160006101000a81548160ff02191690836003811115610deb57610dea61186d565b5b0217905550905050600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081908060018154018082558091505060019003906000526020600020016000909190919091505582600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610ea89190611c0c565b925050819055503373ffffffffffffffffffffffffffffffffffffffff16817ffb617c13a5b4b052ee893903dca019ab1611dfef1b20f7acb7a5bfe008c102608542604051610ef8929190611c74565b60405180910390a380915050610f0c61141d565b919050565b80600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610fb7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fae90611ae5565b60405180910390fd5b813373ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461105c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105390611b51565b60405180910390fd5b6110646113d7565b60006002600085815260200190815260200160002090506002600381111561108f5761108e61186d565b5b8160040160009054906101000a900460ff1660038111156110b3576110b261186d565b5b146110f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ea90611ce9565b60405180910390fd5b60018160040160006101000a81548160ff0219169083600381111561111b5761111a61186d565b5b0217905550600081600301819055508060020154600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461117d9190611c0c565b925050819055503373ffffffffffffffffffffffffffffffffffffffff16847fe372915d347984c68379c4f420399841c8a334216a05e56653a1f93e1f53e9f983600201546040516111cf9190611803565b60405180910390a3506111e061141d565b505050565b600080600260008481526020019081526020016000206040518060a0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff16600381111561129f5761129e61186d565b5b60038111156112b1576112b061186d565b5b815250509050600260038111156112cb576112ca61186d565b5b816080015160038111156112e2576112e161186d565b5b1480156112f3575080606001514210155b915050919050565b6113036115ca565b600260008381526020019081526020016000206040518060a0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff1660038111156113ba576113b961186d565b5b60038111156113cc576113cb61186d565b5b815250509050919050565b600260005403611413576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600081905550565b6001600081905550565b6114a1838473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb858560405160240161145a929190611e29565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611528565b505050565b611522848573ffffffffffffffffffffffffffffffffffffffff166323b872dd8686866040516024016114db93929190611e52565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611528565b50505050565b600080602060008451602086016000885af18061154b576040513d6000823e3d81fd5b3d925060005191505060008214611566576001811415611582565b60008473ffffffffffffffffffffffffffffffffffffffff163b145b156115c457836040517f5274afe70000000000000000000000000000000000000000000000000000000081526004016115bb9190611e89565b60405180910390fd5b50505050565b6040518060a0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000600381111561161b5761161a61186d565b5b81525090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061165182611626565b9050919050565b61166181611646565b811461166c57600080fd5b50565b60008135905061167e81611658565b92915050565b60006020828403121561169a57611699611621565b5b60006116a88482850161166f565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b6116f0816116dd565b82525050565b600061170283836116e7565b60208301905092915050565b6000602082019050919050565b6000611726826116b1565b61173081856116bc565b935061173b836116cd565b8060005b8381101561176c57815161175388826116f6565b975061175e8361170e565b92505060018101905061173f565b5085935050505092915050565b60006020820190508181036000830152611793818461171b565b905092915050565b6117a4816116dd565b81146117af57600080fd5b50565b6000813590506117c18161179b565b92915050565b6000602082840312156117dd576117dc611621565b5b60006117eb848285016117b2565b91505092915050565b6117fd816116dd565b82525050565b600060208201905061181860008301846117f4565b92915050565b6000806040838503121561183557611834611621565b5b60006118438582860161166f565b9250506020611854858286016117b2565b9150509250929050565b61186781611646565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600481106118ad576118ac61186d565b5b50565b60008190506118be8261189c565b919050565b60006118ce826118b0565b9050919050565b6118de816118c3565b82525050565b600060a0820190506118f960008301886117f4565b611906602083018761185e565b61191360408301866117f4565b61192060608301856117f4565b61192d60808301846118d5565b9695505050505050565b6000819050919050565b600061195c61195761195284611626565b611937565b611626565b9050919050565b600061196e82611941565b9050919050565b600061198082611963565b9050919050565b61199081611975565b82525050565b60006020820190506119ab6000830184611987565b92915050565b60008115159050919050565b6119c6816119b1565b82525050565b60006020820190506119e160008301846119bd565b92915050565b6119f081611646565b82525050565b6119ff816118c3565b82525050565b60a082016000820151611a1b60008501826116e7565b506020820151611a2e60208501826119e7565b506040820151611a4160408501826116e7565b506060820151611a5460608501826116e7565b506080820151611a6760808501826119f6565b50505050565b600060a082019050611a826000830184611a05565b92915050565b600082825260208201905092915050565b7f506f736974696f6e20646f6573206e6f74206578697374000000000000000000600082015250565b6000611acf601783611a88565b9150611ada82611a99565b602082019050919050565b60006020820190508181036000830152611afe81611ac2565b9050919050565b7f4e6f7420706f736974696f6e206f776e65720000000000000000000000000000600082015250565b6000611b3b601283611a88565b9150611b4682611b05565b602082019050919050565b60006020820190508181036000830152611b6a81611b2e565b9050919050565b7f506f736974696f6e206e6f742061637469766500000000000000000000000000600082015250565b6000611ba7601383611a88565b9150611bb282611b71565b602082019050919050565b60006020820190508181036000830152611bd681611b9a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611c17826116dd565b9150611c22836116dd565b9250828201905080821115611c3a57611c39611bdd565b5b92915050565b6000611c4b826116dd565b9150611c56836116dd565b9250828203905081811115611c6e57611c6d611bdd565b5b92915050565b6000604082019050611c8960008301856117f4565b611c9660208301846117f4565b9392505050565b7f506f736974696f6e206e6f742070656e64696e67000000000000000000000000600082015250565b6000611cd3601483611a88565b9150611cde82611c9d565b602082019050919050565b60006020820190508181036000830152611d0281611cc6565b9050919050565b7f4c6f636b20706572696f64206e6f7420656e6465640000000000000000000000600082015250565b6000611d3f601583611a88565b9150611d4a82611d09565b602082019050919050565b60006020820190508181036000830152611d6e81611d32565b9050919050565b7f416d6f756e74206d7573742062652067726561746572207468616e207a65726f600082015250565b6000611dab602083611a88565b9150611db682611d75565b602082019050919050565b60006020820190508181036000830152611dda81611d9e565b9050919050565b6000611dec826116dd565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611e1e57611e1d611bdd565b5b600182019050919050565b6000604082019050611e3e600083018561185e565b611e4b60208301846117f4565b9392505050565b6000606082019050611e67600083018661185e565b611e74602083018561185e565b611e8160408301846117f4565b949350505050565b6000602082019050611e9e600083018461185e565b9291505056fea2646970667358221220e5ba9c6870cae700d0729e416b9ddf25b313290b6d1acfbdf21cb4a1c68368ee64736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c8063899346c711610097578063a694fc3a11610066578063a694fc3a146102b0578063bce1b520146102e0578063c95c0d89146102fc578063eb02c3011461032c576100f5565b8063899346c71461021057806399fbab881461022e5780639ae17af4146102625780639bfd8d6114610280576100f5565b8063379607f5116100d3578063379607f5146101765780635e1b4d99146101925780636e2f1696146101c25780636e99d52f146101f2576100f5565b80632a6bc2dd146100fa5780632e17de781461012a5780632f6fe5f714610146575b600080fd5b610114600480360381019061010f9190611684565b61035c565b6040516101219190611779565b60405180910390f35b610144600480360381019061013f91906117c7565b6103f3565b005b610160600480360381019061015b91906117c7565b6106da565b60405161016d9190611803565b60405180910390f35b610190600480360381019061018b91906117c7565b610814565b005b6101ac60048036038101906101a7919061181e565b610b1c565b6040516101b99190611803565b60405180910390f35b6101dc60048036038101906101d79190611684565b610b4d565b6040516101e99190611803565b60405180910390f35b6101fa610b96565b6040516102079190611803565b60405180910390f35b610218610b9d565b6040516102259190611803565b60405180910390f35b610248600480360381019061024391906117c7565b610ba3565b6040516102599594939291906118e4565b60405180910390f35b61026a610c06565b6040516102779190611996565b60405180910390f35b61029a60048036038101906102959190611684565b610c2a565b6040516102a79190611803565b60405180910390f35b6102ca60048036038101906102c591906117c7565b610c42565b6040516102d79190611803565b60405180910390f35b6102fa60048036038101906102f591906117c7565b610f11565b005b610316600480360381019061031191906117c7565b6111e5565b60405161032391906119cc565b60405180910390f35b610346600480360381019061034191906117c7565b6112fb565b6040516103539190611a6d565b60405180910390f35b6060600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156103e757602002820191906000526020600020905b8154815260200190600101908083116103d3575b50505050509050919050565b80600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610499576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049090611ae5565b60405180910390fd5b813373ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461053e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053590611b51565b60405180910390fd5b6105466113d7565b6000600260008581526020019081526020016000209050600160038111156105715761057061186d565b5b8160040160009054906101000a900460ff1660038111156105955761059461186d565b5b146105d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105cc90611bbd565b60405180910390fd5b60028160040160006101000a81548160ff021916908360038111156105fd576105fc61186d565b5b021790555062127500426106119190611c0c565b81600301819055508060020154600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461066c9190611c40565b925050819055503373ffffffffffffffffffffffffffffffffffffffff16847ff69bed7fd866b8ff5e2d7b9ca384c57a26024d067d128ea7f01152351d6d085b836002015484600301546040516106c4929190611c74565b60405180910390a3506106d561141d565b505050565b600080600260008481526020019081526020016000206040518060a0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff1660038111156107945761079361186d565b5b60038111156107a6576107a561186d565b5b815250509050600260038111156107c0576107bf61186d565b5b816080015160038111156107d7576107d661186d565b5b146107e657600091505061080f565b806060015142106107fb57600091505061080f565b42816060015161080b9190611c40565b9150505b919050565b80600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036108ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b190611ae5565b60405180910390fd5b813373ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461095f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095690611b51565b60405180910390fd5b6109676113d7565b6000600260008581526020019081526020016000209050600260038111156109925761099161186d565b5b8160040160009054906101000a900460ff1660038111156109b6576109b561186d565b5b146109f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ed90611ce9565b60405180910390fd5b8060030154421015610a3d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3490611d55565b60405180910390fd5b60008160020154905060038260040160006101000a81548160ff02191690836003811115610a6e57610a6d61186d565b5b0217905550610abe33827f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166114279092919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff16857ff18ca9717b47ea7629d17b5d7b2ede46e864155725629e7d0347924c2f6d112d83604051610b059190611803565b60405180910390a35050610b1761141d565b505050565b60036020528160005260406000208181548110610b3857600080fd5b90600052602060002001600091509150505481565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6212750081565b60015481565b60026020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154908060030154908060040160009054906101000a900460ff16905085565b7f000000000000000000000000000000000000000000000000000000000000000081565b60046020528060005260406000206000915090505481565b6000610c4c6113d7565b60008211610c8f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8690611dc1565b60405180910390fd5b610cdc3330847f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166114a6909392919063ffffffff16565b600060016000815480929190610cf190611de1565b9190505590506040518060a001604052808281526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018481526020016000815260200160016003811115610d4557610d4461186d565b5b815250600260008381526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201556060820151816003015560808201518160040160006101000a81548160ff02191690836003811115610deb57610dea61186d565b5b0217905550905050600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081908060018154018082558091505060019003906000526020600020016000909190919091505582600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610ea89190611c0c565b925050819055503373ffffffffffffffffffffffffffffffffffffffff16817ffb617c13a5b4b052ee893903dca019ab1611dfef1b20f7acb7a5bfe008c102608542604051610ef8929190611c74565b60405180910390a380915050610f0c61141d565b919050565b80600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610fb7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fae90611ae5565b60405180910390fd5b813373ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461105c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105390611b51565b60405180910390fd5b6110646113d7565b60006002600085815260200190815260200160002090506002600381111561108f5761108e61186d565b5b8160040160009054906101000a900460ff1660038111156110b3576110b261186d565b5b146110f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ea90611ce9565b60405180910390fd5b60018160040160006101000a81548160ff0219169083600381111561111b5761111a61186d565b5b0217905550600081600301819055508060020154600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461117d9190611c0c565b925050819055503373ffffffffffffffffffffffffffffffffffffffff16847fe372915d347984c68379c4f420399841c8a334216a05e56653a1f93e1f53e9f983600201546040516111cf9190611803565b60405180910390a3506111e061141d565b505050565b600080600260008481526020019081526020016000206040518060a0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff16600381111561129f5761129e61186d565b5b60038111156112b1576112b061186d565b5b815250509050600260038111156112cb576112ca61186d565b5b816080015160038111156112e2576112e161186d565b5b1480156112f3575080606001514210155b915050919050565b6113036115ca565b600260008381526020019081526020016000206040518060a0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff1660038111156113ba576113b961186d565b5b60038111156113cc576113cb61186d565b5b815250509050919050565b600260005403611413576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600081905550565b6001600081905550565b6114a1838473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb858560405160240161145a929190611e29565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611528565b505050565b611522848573ffffffffffffffffffffffffffffffffffffffff166323b872dd8686866040516024016114db93929190611e52565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611528565b50505050565b600080602060008451602086016000885af18061154b576040513d6000823e3d81fd5b3d925060005191505060008214611566576001811415611582565b60008473ffffffffffffffffffffffffffffffffffffffff163b145b156115c457836040517f5274afe70000000000000000000000000000000000000000000000000000000081526004016115bb9190611e89565b60405180910390fd5b50505050565b6040518060a0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000600381111561161b5761161a61186d565b5b81525090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061165182611626565b9050919050565b61166181611646565b811461166c57600080fd5b50565b60008135905061167e81611658565b92915050565b60006020828403121561169a57611699611621565b5b60006116a88482850161166f565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b6116f0816116dd565b82525050565b600061170283836116e7565b60208301905092915050565b6000602082019050919050565b6000611726826116b1565b61173081856116bc565b935061173b836116cd565b8060005b8381101561176c57815161175388826116f6565b975061175e8361170e565b92505060018101905061173f565b5085935050505092915050565b60006020820190508181036000830152611793818461171b565b905092915050565b6117a4816116dd565b81146117af57600080fd5b50565b6000813590506117c18161179b565b92915050565b6000602082840312156117dd576117dc611621565b5b60006117eb848285016117b2565b91505092915050565b6117fd816116dd565b82525050565b600060208201905061181860008301846117f4565b92915050565b6000806040838503121561183557611834611621565b5b60006118438582860161166f565b9250506020611854858286016117b2565b9150509250929050565b61186781611646565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600481106118ad576118ac61186d565b5b50565b60008190506118be8261189c565b919050565b60006118ce826118b0565b9050919050565b6118de816118c3565b82525050565b600060a0820190506118f960008301886117f4565b611906602083018761185e565b61191360408301866117f4565b61192060608301856117f4565b61192d60808301846118d5565b9695505050505050565b6000819050919050565b600061195c61195761195284611626565b611937565b611626565b9050919050565b600061196e82611941565b9050919050565b600061198082611963565b9050919050565b61199081611975565b82525050565b60006020820190506119ab6000830184611987565b92915050565b60008115159050919050565b6119c6816119b1565b82525050565b60006020820190506119e160008301846119bd565b92915050565b6119f081611646565b82525050565b6119ff816118c3565b82525050565b60a082016000820151611a1b60008501826116e7565b506020820151611a2e60208501826119e7565b506040820151611a4160408501826116e7565b506060820151611a5460608501826116e7565b506080820151611a6760808501826119f6565b50505050565b600060a082019050611a826000830184611a05565b92915050565b600082825260208201905092915050565b7f506f736974696f6e20646f6573206e6f74206578697374000000000000000000600082015250565b6000611acf601783611a88565b9150611ada82611a99565b602082019050919050565b60006020820190508181036000830152611afe81611ac2565b9050919050565b7f4e6f7420706f736974696f6e206f776e65720000000000000000000000000000600082015250565b6000611b3b601283611a88565b9150611b4682611b05565b602082019050919050565b60006020820190508181036000830152611b6a81611b2e565b9050919050565b7f506f736974696f6e206e6f742061637469766500000000000000000000000000600082015250565b6000611ba7601383611a88565b9150611bb282611b71565b602082019050919050565b60006020820190508181036000830152611bd681611b9a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611c17826116dd565b9150611c22836116dd565b9250828201905080821115611c3a57611c39611bdd565b5b92915050565b6000611c4b826116dd565b9150611c56836116dd565b9250828203905081811115611c6e57611c6d611bdd565b5b92915050565b6000604082019050611c8960008301856117f4565b611c9660208301846117f4565b9392505050565b7f506f736974696f6e206e6f742070656e64696e67000000000000000000000000600082015250565b6000611cd3601483611a88565b9150611cde82611c9d565b602082019050919050565b60006020820190508181036000830152611d0281611cc6565b9050919050565b7f4c6f636b20706572696f64206e6f7420656e6465640000000000000000000000600082015250565b6000611d3f601583611a88565b9150611d4a82611d09565b602082019050919050565b60006020820190508181036000830152611d6e81611d32565b9050919050565b7f416d6f756e74206d7573742062652067726561746572207468616e207a65726f600082015250565b6000611dab602083611a88565b9150611db682611d75565b602082019050919050565b60006020820190508181036000830152611dda81611d9e565b9050919050565b6000611dec826116dd565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611e1e57611e1d611bdd565b5b600182019050919050565b6000604082019050611e3e600083018561185e565b611e4b60208301846117f4565b9392505050565b6000606082019050611e67600083018661185e565b611e74602083018561185e565b611e8160408301846117f4565b949350505050565b6000602082019050611e9e600083018461185e565b9291505056fea2646970667358221220e5ba9c6870cae700d0729e416b9ddf25b313290b6d1acfbdf21cb4a1c68368ee64736f6c63430008140033",
  "devdoc": {
    "details": "Staking contract for $ROOM tokens with 2-week lock period Features: - Unlimited number of positions per user - Each stake creates a unique position with positionId - 2-week lock period for unstaked tokens - Restake function to return pending tokens to active staking",
    "errors": {
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC-20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "canClaim(uint256)": {
        "details": "Check if position can be claimed",
        "params": {
          "positionId": "ID of the position"
        },
        "returns": {
          "_0": "True if position can be claimed"
        }
      },
      "claim(uint256)": {
        "details": "Claim tokens after lock period has ended",
        "params": {
          "positionId": "ID of the position to claim"
        }
      },
      "getPosition(uint256)": {
        "details": "Get position details",
        "params": {
          "positionId": "ID of the position"
        },
        "returns": {
          "_0": "Position struct"
        }
      },
      "getTimeUntilUnlock(uint256)": {
        "details": "Get time remaining until position can be claimed",
        "params": {
          "positionId": "ID of the position"
        },
        "returns": {
          "_0": "Time remaining in seconds (0 if not pending or already unlockable)"
        }
      },
      "getUserPositions(address)": {
        "details": "Get all position IDs for a user",
        "params": {
          "user": "Address of the user"
        },
        "returns": {
          "_0": "Array of position IDs"
        }
      },
      "getUserTotalStaked(address)": {
        "details": "Get user's total staked amount",
        "params": {
          "user": "Address of the user"
        },
        "returns": {
          "_0": "Total staked amount"
        }
      },
      "restake(uint256)": {
        "details": "Restake tokens from a pending position (cancels lock period)",
        "params": {
          "positionId": "ID of the position to restake"
        }
      },
      "stake(uint256)": {
        "details": "Stake tokens and create a new position",
        "params": {
          "amount": "Amount of tokens to stake"
        },
        "returns": {
          "_0": "positionId The ID of the created position"
        }
      },
      "unstake(uint256)": {
        "details": "Unstake tokens from a position (starts lock period)",
        "params": {
          "positionId": "ID of the position to unstake"
        }
      }
    },
    "title": "Staking",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 642,
        "contract": "contracts/Staking.sol:Staking",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 737,
        "contract": "contracts/Staking.sol:Staking",
        "label": "nextPositionId",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 742,
        "contract": "contracts/Staking.sol:Staking",
        "label": "positions",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(Position)1205_storage)"
      },
      {
        "astId": 747,
        "contract": "contracts/Staking.sol:Staking",
        "label": "userPositions",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 751,
        "contract": "contracts/Staking.sol:Staking",
        "label": "totalStaked",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_enum(PositionStatus)1193": {
        "encoding": "inplace",
        "label": "enum IStaking.PositionStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Position)1205_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IStaking.Position)",
        "numberOfBytes": "32",
        "value": "t_struct(Position)1205_storage"
      },
      "t_struct(Position)1205_storage": {
        "encoding": "inplace",
        "label": "struct IStaking.Position",
        "members": [
          {
            "astId": 1195,
            "contract": "contracts/Staking.sol:Staking",
            "label": "positionId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1197,
            "contract": "contracts/Staking.sol:Staking",
            "label": "owner",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1199,
            "contract": "contracts/Staking.sol:Staking",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1201,
            "contract": "contracts/Staking.sol:Staking",
            "label": "unlockTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1204,
            "contract": "contracts/Staking.sol:Staking",
            "label": "status",
            "offset": 0,
            "slot": "4",
            "type": "t_enum(PositionStatus)1193"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}