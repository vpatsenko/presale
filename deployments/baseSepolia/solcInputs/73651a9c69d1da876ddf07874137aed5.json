{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/interfaces/IERC1363.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @title IERC1363\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n *\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\n */\ninterface IERC1363 is IERC20, IERC165 {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\n     * 0xb0202a11 ===\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n     */\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @param data Additional data with no specified format, sent in call to `spender`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n"
    },
    "@openzeppelin/contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC1363} from \"../../../interfaces/IERC1363.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    /**\n     * @dev An operation with an ERC-20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     *\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n     * only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n     * set here.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            safeTransfer(token, to, value);\n        } else if (!token.transferAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferFromAndCallRelaxed(\n        IERC1363 token,\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) internal {\n        if (to.code.length == 0) {\n            safeTransferFrom(token, from, to, value);\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n     * once without retrying, and relies on the returned value to be true.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            forceApprove(token, to, value);\n        } else if (!token.approveAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            // bubble errors\n            if iszero(success) {\n                let ptr := mload(0x40)\n                returndatacopy(ptr, 0, returndatasize())\n                revert(ptr, returndatasize())\n            }\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "contracts/interfaces/IStaking.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.20;\n\ninterface IStaking {\n    enum PositionStatus {\n        None,\n        Active,\n        Pending,\n        Claimed\n    }\n\n    struct Position {\n        uint256 positionId;\n        address owner;\n        uint256 amount;\n        uint256 unlockTime;\n        uint256 stakeTime;\n        PositionStatus status;\n    }\n\n    event PositionCreated(\n        uint256 indexed positionId,\n        address indexed owner,\n        uint256 amount,\n        uint256 stakeTime\n    );\n\n    event PositionUnstaked(\n        uint256 indexed positionId,\n        address indexed owner,\n        uint256 amount,\n        uint256 unlockTime\n    );\n\n    event PositionClaimed(\n        uint256 indexed positionId,\n        address indexed owner,\n        uint256 amount\n    );\n\n    event PositionRestaked(\n        uint256 indexed positionId,\n        address indexed owner,\n        uint256 amount\n    );\n}\n"
    },
    "contracts/Staking.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport {IStaking} from \"./interfaces/IStaking.sol\";\n\n/**\n * @title Staking\n * @dev Staking contract for $ROOM tokens with 2-week lock period\n * Features:\n * - Unlimited number of positions per user\n * - Each stake creates a unique position with positionId\n * - 2-week lock period for unstaked tokens\n * - Restake function to return pending tokens to active staking\n */\ncontract Staking is ReentrancyGuard, IStaking {\n    using SafeERC20 for IERC20;\n\n    IERC20 public immutable roomToken;\n\n    uint256 public constant COOLDOWN_PERIOD = 2 * 7 * 24 * 3600; // 2 weeks in seconds\n    uint256 public nextPositionId = 1;\n\n    mapping(uint256 => Position) public positions;\n    mapping(address => uint256[]) public userPositions;\n    mapping(address => uint256) public totalStaked;\n\n    address[] public stakers;\n    mapping(address => bool) public isRegistered;\n\n    modifier onlyPositionOwner(uint256 positionId) {\n        require(\n            positions[positionId].owner == msg.sender,\n            \"Not position owner\"\n        );\n        _;\n    }\n\n    modifier positionExists(uint256 positionId) {\n        require(\n            positions[positionId].owner != address(0),\n            \"Position does not exist\"\n        );\n        _;\n    }\n\n    constructor(address _roomToken) {\n        require(_roomToken != address(0), \"ROOM token address cannot be zero\");\n        roomToken = IERC20(_roomToken);\n    }\n\n    /**\n     * @dev Stake tokens and create a new position\n     * @param amount Amount of tokens to stake\n     * @return positionId The ID of the created position\n     */\n    function stake(uint256 amount) external nonReentrant returns (uint256) {\n        require(amount > 0, \"Amount must be greater than zero\");\n        roomToken.safeTransferFrom(msg.sender, address(this), amount);\n\n        uint256 positionId = nextPositionId++;\n        positions[positionId] = Position({\n            positionId: positionId,\n            owner: msg.sender,\n            amount: amount,\n            unlockTime: 0,\n            stakeTime: block.timestamp,\n            status: PositionStatus.Active\n        });\n\n        userPositions[msg.sender].push(positionId);\n        totalStaked[msg.sender] += amount;\n\n        if (!isRegistered[msg.sender]) {\n            isRegistered[msg.sender] = true;\n            stakers.push(msg.sender);\n        }\n\n        emit PositionCreated(positionId, msg.sender, amount, block.timestamp);\n\n        return positionId;\n    }\n\n    /**\n     * @dev Unstake tokens from a position (starts lock period)\n     * @param positionId ID of the position to unstake\n     */\n    function unstake(\n        uint256 positionId\n    )\n        external\n        positionExists(positionId)\n        onlyPositionOwner(positionId)\n        nonReentrant\n    {\n        Position storage position = positions[positionId];\n        require(\n            position.status == PositionStatus.Active,\n            \"Position not active\"\n        );\n\n        position.status = PositionStatus.Pending;\n        position.unlockTime = block.timestamp + COOLDOWN_PERIOD;\n\n        totalStaked[msg.sender] -= position.amount;\n\n        emit PositionUnstaked(\n            positionId,\n            msg.sender,\n            position.amount,\n            position.unlockTime\n        );\n    }\n\n    /**\n     * @dev Claim tokens after lock period has ended\n     * @param positionId ID of the position to claim\n     */\n    function claim(\n        uint256 positionId\n    )\n        external\n        positionExists(positionId)\n        onlyPositionOwner(positionId)\n        nonReentrant\n    {\n        Position storage position = positions[positionId];\n        require(\n            position.status == PositionStatus.Pending,\n            \"Position not pending\"\n        );\n        require(\n            block.timestamp >= position.unlockTime,\n            \"Lock period not ended\"\n        );\n\n        uint256 amount = position.amount;\n        position.status = PositionStatus.Claimed;\n\n        roomToken.safeTransfer(msg.sender, amount);\n\n        emit PositionClaimed(positionId, msg.sender, amount);\n    }\n\n    /**\n     * @dev Restake tokens from a pending position (cancels lock period)\n     * @param positionId ID of the position to restake\n     */\n    function restake(\n        uint256 positionId\n    )\n        external\n        positionExists(positionId)\n        onlyPositionOwner(positionId)\n        nonReentrant\n    {\n        Position storage position = positions[positionId];\n        require(\n            position.status == PositionStatus.Pending,\n            \"Position not pending\"\n        );\n\n        position.status = PositionStatus.Active;\n        position.unlockTime = 0;\n\n        totalStaked[msg.sender] += position.amount;\n\n        emit PositionRestaked(positionId, msg.sender, position.amount);\n    }\n\n    function getAllStakersWithPagination(\n        uint256 offset,\n        uint256 limit\n    ) external view returns (address[] memory) {\n        uint256 stakersLength = stakers.length;\n\n        if (offset >= stakersLength) {\n            address[] memory result = new address[](limit);\n            return result;\n        }\n\n        uint256 actualLimit = limit;\n        if (offset + limit > stakersLength) {\n            actualLimit = stakersLength - offset;\n        }\n\n        address[] memory result = new address[](actualLimit);\n\n        for (uint256 i = 0; i < actualLimit; i++) {\n            result[i] = stakers[offset + i];\n        }\n\n        return result;\n    }\n\n    function getAllPositionsByStatusWithPagination(\n        PositionStatus status,\n        uint256 offset,\n        uint256 limit\n    ) external view returns (Position[] memory) {\n        // First, count how many positions match the status\n        uint256 matchCount = 0;\n        for (uint256 i = 1; i < nextPositionId; i++) {\n            if (positions[i].status == status) {\n                matchCount++;\n            }\n        }\n\n        Position[] memory result = new Position[](limit);\n\n        if (offset >= matchCount) {\n            return result;\n        }\n\n        uint256 actualLimit = limit;\n        if (offset + limit > matchCount) {\n            actualLimit = matchCount - offset;\n        }\n\n        uint256 resultIndex = 0;\n        uint256 currentOffset = 0;\n\n        for (\n            uint256 i = 1;\n            i < nextPositionId && resultIndex < actualLimit;\n            i++\n        ) {\n            if (positions[i].status == status) {\n                if (currentOffset >= offset) {\n                    result[resultIndex] = positions[i];\n                    resultIndex++;\n                }\n                currentOffset++;\n            }\n        }\n\n        return result;\n    }\n\n    function getAllPositionsWithPagination(\n        uint256 offset,\n        uint256 limit\n    ) external view returns (Position[] memory) {\n        uint256 totalPositions = nextPositionId - 1; // positions start from ID 1\n\n        Position[] memory result = new Position[](limit);\n\n        if (offset >= totalPositions) {\n            return result;\n        }\n\n        uint256 actualLimit = limit;\n        if (offset + limit > totalPositions) {\n            actualLimit = totalPositions - offset;\n        }\n\n        for (uint256 i = 0; i < actualLimit; i++) {\n            result[i] = positions[offset + 1 + i]; // positions start from ID 1\n        }\n\n        return result;\n    }\n\n    function getUserPositionsPaginated(\n        address user,\n        uint256 offset,\n        uint256 limit\n    ) external view returns (uint256[] memory) {\n        uint256[] storage allPositions = userPositions[user];\n        uint256 length = allPositions.length;\n\n        if (offset >= length) {\n            return new uint256[](0);\n        }\n\n        uint256 end = offset + limit;\n        if (end > length) {\n            end = length;\n        }\n\n        uint256[] memory result = new uint256[](end - offset);\n        for (uint256 i = offset; i < end; i++) {\n            result[i - offset] = allPositions[i];\n        }\n\n        return result;\n    }\n\n    function getUserPositions(\n        address user\n    ) external view returns (uint256[] memory) {\n        return userPositions[user];\n    }\n\n    function getUserPositionCount(\n        address user\n    ) external view returns (uint256) {\n        return userPositions[user].length;\n    }\n\n    /**\n     * @dev Get position details\n     * @param positionId ID of the position\n     * @return Position struct\n     */\n    function getPosition(\n        uint256 positionId\n    ) external view returns (Position memory) {\n        return positions[positionId];\n    }\n\n    /**\n     * @dev Get user's total staked amount\n     * @param user Address of the user\n     * @return Total staked amount\n     */\n    function getUserTotalStaked(address user) external view returns (uint256) {\n        return totalStaked[user];\n    }\n\n    /**\n     * @dev Get time remaining until position can be claimed\n     * @param positionId ID of the position\n     * @return Time remaining in seconds (0 if not pending or already unlockable)\n     */\n    function getTimeUntilUnlock(\n        uint256 positionId\n    ) external view returns (uint256) {\n        Position memory position = positions[positionId];\n        if (position.status != PositionStatus.Pending) {\n            return 0;\n        }\n        if (block.timestamp >= position.unlockTime) {\n            return 0;\n        }\n        return position.unlockTime - block.timestamp;\n    }\n\n    /**\n     * @dev Check if position can be claimed\n     * @param positionId ID of the position\n     * @return True if position can be claimed\n     */\n    function canClaim(uint256 positionId) external view returns (bool) {\n        Position memory position = positions[positionId];\n        return\n            position.status == PositionStatus.Pending &&\n            block.timestamp >= position.unlockTime;\n    }\n}\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}